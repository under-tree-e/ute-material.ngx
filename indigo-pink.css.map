{"version":3,"file":"indigo-pink.css","mappings":";;;AAUA;ACOI;EC6DA;AC3EJ;;AFcI;EC6DA;EAAA;EAAA;EAAA;EAAA;ACnEJ;;ACsBI;EF6CA;EAAA;EAAA;EAAA;EAAA;AC3DJ;;ACmBI;EFwCA;EAAA;EAAA;EAAA;EAAA;ACnDJ;;AFVI;EC6DA;AC/CJ;;AEcI;EHiCA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACpCJ;;AFzBI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACzBJ;;AEEI;EHuBA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACdJ;;AELI;EHmBA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACHJ;;AF1DI;EC6DA;EAAA;ACEJ;;AG7BM;EJ2BF;ACMJ;;AGjCM;EJ2BF;ACUJ;;AGrCM;EJ2BF;ACcJ;;AGzCM;EJ2BF;ACkBJ;;AG7CM;EJ2BF;ACsBJ;;AGjDM;EJ2BF;AC0BJ;;AGrDM;EJ2BF;AC8BJ;;AGzDM;EJ2BF;ACkCJ;;AG7DM;EJ2BF;ACsCJ;;AGjEM;EJ2BF;AC0CJ;;AGrEM;EJ2BF;AC8CJ;;AGzEM;EJ2BF;ACkDJ;;AG7EM;EJ2BF;ACsDJ;;AGjFM;EJ2BF;AC0DJ;;AGrFM;EJ2BF;AC8DJ;;AGzFM;EJ2BF;ACkEJ;;AG7FM;EJ2BF;ACsEJ;;AGjGM;EJ2BF;AC0EJ;;AGrGM;EJ2BF;AC8EJ;;AGzGM;EJ2BF;ACkFJ;;AG7GM;EJ2BF;ACsFJ;;AGjHM;EJ2BF;AC0FJ;;AGrHM;EJ2BF;AC8FJ;;AGzHM;EJ2BF;ACkGJ;;AG7HM;EJ2BF;ACsGJ;;AGxHI;EACE;AH2HN;;AFvKI;EC6DA;EAAA;EAAA;EAAA;EAAA;ACkHJ;;AF/KI;EC6DA;EAAA;EAAA;EAAA;EAAA;AC0HJ;;AFvLI;EC6DA;EAAA;EAAA;ACgIJ;;AF7LI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;ACyIJ;;AFtMI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACsJJ;;AFnNI;EC6DA;EAAA;EAAA;AC4JJ;;AIpMI;ELwCA;EAAA;ACiKJ;AItMM;ELqCF;EAAA;ACqKJ;AItMM;ELiCF;EAAA;ACyKJ;;AFtOI;EC6DA;EAAA;AC8KJ;;AF3OI;EC6DA;EAAA;ACmLJ;;AFhPI;EC6DA;EAAA;EAAA;EAAA;AC0LJ;;AFvPI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;ACmMJ;;AFhQI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC+PJ;;AKxRI;ENyBA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACyQJ;;AKzRI;ENgBA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACmRJ;;AFhVI;EC6DA;EAAA;EAAA;EAAA;EAAA;AC2RJ;;AFxVI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACiTJ;;AF9WI;EC6DA;ACqTJ;;AFlXI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACgUJ;AMxWM;EPwCF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC0UJ;AM7WM;EPmCF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACoVJ;;AFjZI;EC6DA;ACwVJ;;AFrZI;EC6DA;EAAA;EAAA;EAAA;EAAA;ACgWJ;;AF7ZI;EC6DA;EAAA;ACqWJ;;AFlaI;EC6DA;ACyWJ;;AFtaI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACuXJ;;AFpbI;EC6DA;EAAA;EAAA;AC6XJ;;AF1bI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC0YJ;;AOtcI;ER4DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACoaJ;;AO9cI;ER0CA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC2bJ;AO7dQ;ERkCJ;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACidJ;AO5eQ;ER2BJ;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACueJ;AO3fQ;ERoBJ;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC6fJ;;AO5eI;ERjBA;ACigBJ;;AOjgBI;ERAA;EAAA;EAAA;EAAA;EAAA;ACygBJ;;AFtkBI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACijBJ;;AF9mBI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ES7BA;ARonBJ;AQ9mBI;ETuBA;AC0lBJ;AQ7mBQ;ETmBJ;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACumBJ;AQrnBQ;ETcJ;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AConBJ;;AFjrBI;EC6DA;ACwnBJ;;AQ9mBM;ETVF;EAAA;EAAA;EAAA;EAAA;ACgoBJ;;AF7rBI;EC6DA;EAAA;EAAA;ACsoBJ;;AS9qBI;EVwCA;AC0oBJ;AS/qBM;EVqCF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACwpBJ;ASvrBM;EV+BF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACsqBJ;AS/rBM;EVyBF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACorBJ;;AFjvBI;EC6DA;EAAA;ACyrBJ;;AS5rBI;EVGA;EAAA;EAAA;EAAA;EAAA;ACisBJ;;AF9vBI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACutBJ;;AFpxBI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC6uBJ;AUpwBI;EXuBA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACyvBJ;AUvwBM;EXcF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACqwBJ;;AFl0BI;EC6DA;EAAA;EAAA;EAAA;EAAA;AC6wBJ;;AF10BI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACyxBJ;;AFt1BI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;ACkyBJ;;AF/1BI;EC6DA;EAAA;EAAA;EAAA;EAAA;AC0yBJ;;AFv2BI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC4zBJ;;AFz3BI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACg1BJ;;AWj3BI;;EZiCA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC61BJ;;AWx3BM;;EZ2BF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC02BJ;;AW93BM;;EZoBF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACu3BJ;;AWr4BI;EZcA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC24BJ;;AWt5BI;EZWA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC+5BJ;;AWv6BI;EZQA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACm7BJ;;AYzNE;;Eb1tBE;ACw7BJ;AYidI;;Ebz4CA;AC47BJ;;AWr7BM;;;EAGE;AXw7BR;;AF//BI;EC6DA;EAAA;EAAA;EAAA;EAAA;AC08BJ;;AW36BI;;EZ/BA;AC+8BJ;;AWp6BQ;EACE;AXu6BV;AW75BQ;EACE;AX+5BV;;AFnhCI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACw+BJ;;AWn5BI;EACE;EACA;AXs5BN;;AF1iCI;EC6DA;EAAA;EAAA;EAAA;ACo/BJ;;AFjjCI;EC6DA;EAAA;EAAA;AC0/BJ;;AFvjCI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;ACmgCJ;;AFhkCI;EC6DA;EAAA;EAAA;EAAA;EAAA;AC2gCJ;;Aa7iCI;EdkCA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC2hCJ;Aa1jCM;Ed+BF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC0iCJ;AarkCM;Ed2BF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACyjCJ;AahlCM;EduBF;EAAA;AC6jCJ;AahlCM;EdmBF;EAAA;ACikCJ;AahlCM;EdeF;EAAA;ACqkCJ;;AapiCI;EdjCA;ACykCJ;;Aa5jCI;EdbA;EAAA;EAAA;EAAA;EAAA;ACilCJ;;AF9oCI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC2lCJ;;AFxpCI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACgnCJ;;AclpCI;EfkCA;AConCJ;AcnpCM;Ef+BF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACuoCJ;AclqCM;Ef2BF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC0pCJ;;AFvtCI;EC6DA;EAAA;AC+pCJ;;ActqCI;EfOA;EAAA;EAAA;EAAA;EAAA;ACuqCJ;;AFpuCI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACgsCJ;;AF7vCI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC+uCJ;;Ae7pCM;EhBlFF;EAAA;EAAA;ACqvCJ;Ae/pCM;EhBtFF;EAAA;EAAA;AC0vCJ;AehqCM;EhB1FF;EAAA;EAAA;AC+vCJ;;Ae/pCM;EhBhGF;EAAA;EAAA;EAAA;ACswCJ;AelqCM;EhBpGF;EAAA;EAAA;EAAA;AC4wCJ;AepqCM;EhBxGF;EAAA;EAAA;EAAA;ACkxCJ;;AepqCM;EhB9GF;EAAA;EAAA;EAAA;ACyxCJ;AevqCM;EhBlHF;EAAA;EAAA;EAAA;AC+xCJ;AezqCM;EhBtHF;EAAA;EAAA;EAAA;ACqyCJ;;AezqCM;EhB5HF;EAAA;EAAA;EAAA;AC4yCJ;Ae5qCM;EhBhIF;EAAA;EAAA;EAAA;ACkzCJ;Ae9qCM;EhBpIF;EAAA;EAAA;EAAA;ACwzCJ;;AFr3CI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACm0CJ;;AFh4CI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC01CJ;;AFv5CI;EC6DA;AC81CJ;;AF35CI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACy2CJ;AgBt4CQ;EjB6BJ;EAAA;EAAA;AC82CJ;AgBv4CQ;EjByBJ;EAAA;EAAA;ACm3CJ;AgBx4CQ;EjBqBJ;EAAA;EAAA;ACw3CJ;;AFr7CI;EC6DA;AC43CJ;;AgBl2CI;EjB1BA;EiBsCE;EACA;EACA;AhB21CN;;AFh8CI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;AC44CJ;;AFz8CI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACk7CJ;AiBh7CQ;ElBFJ;EAAA;EAAA;EAAA;ACw7CJ;AiBl7CQ;ElBNJ;EAAA;EAAA;EAAA;AC87CJ;AiBp7CQ;ElBVJ;EAAA;EAAA;EAAA;ACo8CJ;AiBp7CQ;ElBhBJ;EAAA;EAAA;EAAA;AC08CJ;AiBt7CQ;ElBpBJ;EAAA;EAAA;EAAA;ACg9CJ;AiBx7CQ;ElBxBJ;EAAA;EAAA;EAAA;ACs9CJ;;AFnhDI;EC6DA;EAAA;AC29CJ;;AFxhDI;EC6DA;EAAA;EAAA;EAAA;ACk+CJ;;AF/hDI;EC6DA;ACs+CJ;;AFniDI;EC6DA;EAAA;EAAA;AC4+CJ;;AFziDI;EC6DA;EAAA;EAAA;EAAA;ACm/CJ;;AFhjDI;EC6DA;ACu/CJ;;AFpjDI;EC6DA;EAAA;EAAA;EAAA;AC8/CJ;;AF3jDI;EC6DA;EAAA;EAAA;ACogDJ;;AFjkDI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACshDJ;;AFnlDI;EC6DA;EAAA;AC2hDJ;;AFxlDI;EC6DA;AC+hDJ;AkBrkDM;EnBsCF;ACkiDJ;AkBnkDM;EnBiCF;ACqiDJ;;AFlmDI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACwjDJ;;AFrnDI;EC6DA;EAAA;EAAA;EAAA;AC+jDJ;;AmBtmDI;EpBuCA;EAAA;ACokDJ;;AmBtmDI;EpBkCA;EAAA;ACykDJ;;AFtoDI;EC6DA;EAAA;EAAA;EAAA;EAAA;ACilDJ;;AF9oDI;EC6DA;ACqlDJ;;AFlpDI;EC6DA;EAAA;AC0lDJ;;AFvpDI;EC6DA;EAAA;EAAA;EAAA;EAAA;ACkmDJ;;AF/pDI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;AC2mDJ;;AFxqDI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC+nDJ;;AF5rDI;EC6DA;ACmoDJ;;AFhsDI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACgpDJ;;AF7sDI;EC6DA;EAAA;EAAA;EAAA;ACupDJ;;AFptDI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACurDJ;;AoBxsDM;ErBiBF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACosDJ;AoBjtDM;ErBaF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACgtDJ;;AoBvtDM;ErBOF;ACotDJ;AoBrtDM;ErBCF;ACutDJ;;AoBnqDI;ErBpDA;AC2tDJ;AgBjsDI;EjB1BA;EiBsCE;EACA;EACA;AhByrDN;;AF9xDI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC4uDJ;;AFzyDI;EC6DA;ACgvDJ;;AF7yDI;EC6DA;ACovDJ;;AFjzDI;EC6DA;EAAA;EAAA;AC0vDJ;;AFvzDI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACswDJ;;AFn0DI;EC6DA;EAAA;AC2wDJ;;AFx0DI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACwxDJ;;AFr1DI;EC6DA;EAAA;EAAA;EAAA;AC+xDJ;;AF51DI;EC6DA;ACmyDJ;;AqB10DM;EtBuCF;ACuyDJ;AqB10DM;EtBmCF;AC0yDJ;AqBz0DM;EtB+BF;AC6yDJ;;AF12DI;EC6DA;EAAA;EAAA;ACmzDJ;;AFh3DI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;AC4zDJ;;AFz3DI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACi1DJ;AsB/3DM;EvB8CF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AC01DJ;AsBn4DM;EvByCF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACm2DJ;;AFh6DI;EC6DA;ACu2DJ;;AFp6DI;EC6DA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;ACi3DJ;;AF96DI;EC6DA;ACq3DJ;;AFl7DI;EC6DA;EAAA;AC03DJ;;AuBx6DM;ExB8CF;EAAA;AC+3DJ;AuBz6DM;ExB0CF;EAAA;ACm4DJ;AuBz6DM;ExBsCF;EAAA;ACu4DJ;;AFp8DI;EC6DA;EAAA;AC44DJ;;AFz8DI;EC6DA;EAAA;EAAA;EAAA;EAAA;ACo5DJ;;AFj9DI;EC6DA;EAAA;ACy5DJ;;AFt9DI;EC6DA;AC65DJ;;AF19DI;EC6DA;EAAA;EAAA;ACm6DJ;;AwBp9DI;EACI;AxBu9DR;;AwBp9DI;EACI;AxBu9DR;AwBr9DQ;EACI;AxBu9DZ;;AwBn9DI;EACI;EACA;AxBs9DR;;AwBn9DI;EACI;AxBs9DR;AwBp9DQ;EACI;AxBs9DZ;;AwBl9DI;EACI;AxBq9DR;;AyB//DI;EACI;AzBkgER;AyBhgEQ;EACI;EACA;AzBkgEZ;AyB//DQ;EACI;AzBigEZ;AyB9/DQ;EACI;AzBggEZ;AyB9/DY;EACI;AzBggEhB;AyB7/DY;EACI;AzB+/DhB;AyB7/DgB;EACI;AzB+/DpB;AyB3/DY;EACI;AzB6/DhB;;AyBx/DI;EACI;EACA;AzB2/DR;AyB1/DQ;EACI;AzB4/DZ;;AyBx/DI;;EAEI;AzB2/DR;;AyBx/DI;EAEQ;IACI;EzB0/Dd;EyBr/DU;IACI;EzBu/Dd;AACF;A0BhjEE;EACE;A1BkjEJ;;A0B/iEE;;EAEE;A1BkjEJ;;A0B/iEE;EAEE;EACA;A1BijEJ;;A0B5iEE;EACE;A1B+iEJ;;A0B3iEE;EACE;A1B8iEJ;;A0B3iEE;EACE;A1B8iEJ;;A0B3iEE;;;;EAIE;A1B8iEJ;;A2B9kEI;EACE;A3BilEN;A2B9kEI;EACE;EACA;A3BglEN;A2B9kEM;EACE;A3BglER;A2B5kEI;;EAEE;A3B8kEN;A2B3kEI;EACE;A3B6kEN;;A4BzmEE;EACE,aAqBoC;A5BulExC;;A4BzmEE;EACE,eAiBoC;A5B2lExC;;A4BzmEE;EACE,mBAaoC;A5B+lExC;;A4BrnEE;EACE,aAsBmC;A5BkmEvC;;A4BrnEE;EACE,eAkBmC;A5BsmEvC;;A4BrnEE;EACE,mBAcmC;A5B0mEvC;;A4BjoEE;EACE,aA2B6C;A5BymEjD;;A4BjoEE;EACE,eAuB6C;A5B6mEjD;;A4BjoEE;EACE,mBAmB6C;A5BinEjD;;A4B7oEE;EACE,aA4B6C;A5BonEjD;;A4B7oEE;EACE,eAwB6C;A5BwnEjD;;A4B7oEE;EACE,mBAoB6C;A5B4nEjD;;A4BzpEE;EACE,aA6B6C;A5B+nEjD;;A4BzpEE;EACE,eAyB6C;A5BmoEjD;;A4BzpEE;EACE,mBAqB6C;A5BuoEjD;;A4BrqEE;EACE,aA8B6C;A5B0oEjD;;A4BrqEE;EACE,eA0B6C;A5B8oEjD;;A4BrqEE;EACE,mBAsB6C;A5BkpEjD;;A4BjrEE;EACE,aA+B6C;A5BqpEjD;;A4BjrEE;EACE,eA2B6C;A5BypEjD;;A4BjrEE;EACE,mBAuB6C;A5B6pEjD;;A4B7rEE;EACE,aAgC6C;A5BgqEjD;;A4B7rEE;EACE,eA4B6C;A5BoqEjD;;A4B7rEE;EACE,mBAwB6C;A5BwqEjD;;A4BzsEE;EACE,aAiC6C;A5B2qEjD;;A4BzsEE;EACE,eA6B6C;A5B+qEjD;;A4BzsEE;EACE,mBAyB6C;A5BmrEjD;;A4BrtEE;EACE,aAkC6C;A5BsrEjD;;A4BrtEE;EACE,eA8B6C;A5B0rEjD;;A4BrtEE;EACE,mBA0B6C;A5B8rEjD;;A6B9tEE;;EAEE;A7BiuEJ;;A6B9tEE;;EAEE;A7BiuEJ;;A6B9tEE;;;;EAIE;A7BiuEJ;;A8B5uEI;EACE;A9B+uEN;;A+BhvEQ;EACI;A/BmvEZ;A+BhvEQ;EACI;A/BkvEZ;A+B/uEQ;EACI;A/BivEZ;A+B/uEY;EACI;A/BivEhB;A+B7uEQ;EACI;A/B+uEZ;A+B5uEQ;EACI;A/B8uEZ;A+B3uEQ;;EAEI;A/B6uEZ;A+B1uEQ;;EAEI;A/B4uEZ;A+BzuEQ;EACI;A/B2uEZ;A+BvuEY;EACI;A/ByuEhB;A+BruEQ;EAII;A/BouEZ;A+BvuEY;EACI;A/ByuEhB;;AgCvxEE;EACE;AhC0xEJ;AgCxxEI;EACE,aANW;AhCgyEjB;AgCvxEI;EACE;AhCyxEN;AgCtxEI;EACE,aAfU;AhCuyEhB;AgCrxEI;EACE,eAnBU;AhC0yEhB;;AiCxyEE;EACE;AjC2yEJ;AiCzyEI;EACE;AjC2yEN;AiCzyEM;EACE;AjC2yER;AiCxyEM;EACE;AjC0yER;;AkCpzEE;EACE;AlCuzEJ;AkCrzEI;EACE;AlCuzEN;AkCrzEM;EAEE;AlCszER,C","sources":["./src/styles/_constants.scss","./node_modules/@angular/material/core/style/_sass-utils.scss","./node_modules/@material/theme/_css.scss","./src/styles/custom-themes/indigo-pink.scss","./node_modules/@angular/material/core/option/_option-theme.scss","./node_modules/@angular/material/core/selection/pseudo-checkbox/_pseudo-checkbox-theme.scss","./node_modules/@angular/material/core/_core-theme.scss","./node_modules/@angular/material/progress-bar/_progress-bar-theme.scss","./node_modules/@angular/material/form-field/_form-field-theme.scss","./node_modules/@angular/material/select/_select-theme.scss","./node_modules/@angular/material/chips/_chips-theme.scss","./node_modules/@angular/material/slide-toggle/_slide-toggle-theme.scss","./node_modules/@angular/material/radio/_radio-theme.scss","./node_modules/@angular/material/slider/_slider-theme.scss","./node_modules/@angular/material/list/_list-theme.scss","./node_modules/@material/list/_list.scss","./node_modules/@angular/material/tabs/_tabs-theme.scss","./node_modules/@angular/material/checkbox/_checkbox-theme.scss","./node_modules/@angular/material/button/_button-theme.scss","./node_modules/@angular/material/button/_icon-button-theme.scss","./node_modules/@angular/material/button/_fab-theme.scss","./node_modules/@angular/material/progress-spinner/_progress-spinner-theme.scss","./node_modules/@angular/material/badge/_badge-theme.scss","./node_modules/@angular/material/datepicker/_datepicker-theme.scss","./node_modules/@angular/material/icon/_icon-theme.scss","./node_modules/@angular/material/stepper/_stepper-theme.scss","./node_modules/@angular/material/toolbar/_toolbar-theme.scss","./src/_app-theme.scss","./src/app/pages/layout/_layout-theme.scss","./src/styles/_api-theme.scss","./src/styles/_markdown-theme.scss","./src/styles/_svg-theme.scss","./src/styles/_tables-theme.scss","./src/app/shared/footer/_footer-theme.scss","./src/app/pages/home/_home-theme.scss","./src/app/pages/not-found/_not-found-theme.scss","./src/app/shared/navbar/_navbar-theme.scss","./src/app/shared/table-of-contents/_table-of-contents-theme.scss"],"sourcesContent":["// The values were determined through the combination of Material Design breakpoints and careful\n// testing of the application across a range of common device widths (360px+).\n// These breakpoint values need to stay in sync with the related constants in\n// src/app/pages/component-sidenav/component-sidenav.ts.\n// The extra small breakpoint is used for styling the guides and certain aspects of the tables.\n$extra-small-breakpoint-width: 720px;\n// The small breakpoint is used for the component category and component list pages, the component\n// pages, the component sidenav, and certain aspects of the tables.\n$small-breakpoint-width: 959px;\n\n/* For desktop, the content should be aligned with the page title. */\n$content-padding-guides-side: 70px;\n$content-padding-sidenav: 50px;\n$content-padding-side-xs: 15px;\n\n$sidenav-width: 240px;\n","@use 'sass:color';\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n\n/// Include content under the current selector (&) or the document root if there is no current\n/// selector.\n/// @param {String} $root [html] The default root selector to use when there is no current selector.\n/// @output The given content under the current selector, or root selector if there is no current\n///     selector.\n/// @content Content to output under the current selector, or root selector if there is no current\n///     selector.\n@mixin current-selector-or-root($root: html) {\n  @if & {\n    @content;\n  }\n  @else {\n    #{$root} {\n      @content;\n    }\n  }\n}\n\n/// A version of the standard `map.merge` function that takes a variable number of arguments.\n/// Each argument is merged into the final result from left to right.\n/// @param {List} $maps The maps to combine with map.merge\n/// @return {Map} The combined result of successively calling map.merge with each parameter.\n@function merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.merge($result, $map);\n  }\n  @return $result;\n}\n\n/// A version of the standard `map.deep-merge` function that takes a variable number of arguments.\n/// Each argument is deep-merged into the final result from left to right.\n/// @param {List} $maps The maps to combine with map.deep-merge\n/// @return {Map} The combined result of successively calling map.deep-merge with each parameter.\n@function deep-merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.deep-merge($result, $map);\n  }\n  @return $result;\n}\n\n/// Coerces the given value to a list, by converting any non-list value into a single-item list.\n/// This should be used when dealing with user-passed lists of args to avoid confusing errors,\n/// since Sass treats `($x)` as equivalent to `$x`.\n/// @param {Any} $value The value to coerce to a list.\n/// @return {List} The original $value if it was a list, otherwise a single-item list containing\n///     $value.\n@function coerce-to-list($value) {\n  @return if(meta.type-of($value) != 'list', ($value,), $value);\n}\n\n/// A version of the Sass `color.change` function that is safe ot use with CSS variables.\n@function safe-color-change($color, $args...) {\n  $args: meta.keywords($args);\n  @return if(meta.type-of($color) == 'color', color.change($color, $args...), $color);\n}\n\n/// Gets the given arguments as a map of keywords and validates that only supported arguments were\n/// passed.\n/// @param {ArgList} $args The arguments to convert to a keywords map.\n/// @param {List} $supported-args The supported argument names.\n/// @return {Map} The $args as a map of argument name to argument value.\n@function validate-keyword-args($args, $supported-args) {\n  @if list.length($args) > 0 {\n    @error #{'Expected keyword args, but got positional args: '}#{$args};\n  }\n  $kwargs: meta.keywords($args);\n  @each $arg, $v in $kwargs {\n    @if list.index($supported-args, $arg) == null {\n      @error #{'Unsupported argument '}#{$arg}#{'. Valid arguments are: '}#{$supported-args};\n    }\n  }\n  @return $kwargs;\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use './gss';\n\n/// When true, add an additional property/value declaration before declarations\n/// that use advanced features such as custom properties or CSS functions. This\n/// adds fallback support for older browsers such as IE11 that do not support\n/// these features at the cost of additional CSS. Set this variable to false to\n/// disable generating fallback declarations.\n$enable-fallback-declarations: true !default;\n\n/// Writes a CSS property/value declaration. This mixin is used throughout the\n/// theme package for consistency for dynamically setting CSS property values.\n///\n/// This mixin may optionally take a fallback value. For advanced features such\n/// as custom properties or CSS functions like min and max, a fallback value is\n/// recommended to support older browsers.\n///\n/// @param {String} $property - The CSS property of the declaration.\n/// @param {*} $value - The value of the CSS declaration. The value should be\n///     resolved by other theme functions first (i.e. custom property Maps and\n///     Material theme keys are not supported in this mixin). If the value is\n///     null, no declarations will be emitted.\n/// @param {*} $fallback - An optional fallback value for older browsers. If\n///     provided, a second property/value declaration will be added before the\n///     main property/value declaration.\n/// @param {Map} $gss - An optional Map of GSS annotations to add.\n/// @param {Bool} $important - If true, add `!important` to the declaration.\n@mixin declaration(\n  $property,\n  $value,\n  $fallback-value: null,\n  $gss: (),\n  $important: false\n) {\n  // Normally setting a null value to a property will not emit CSS, so mixins\n  // wouldn't need to check this. However, Sass will throw an error if the\n  // interpolated property is a custom property.\n  @if $value != null {\n    $important-rule: if($important, ' !important', '');\n\n    @if $fallback-value and $enable-fallback-declarations {\n      @include gss.annotate($gss);\n      #{$property}: #{$fallback-value} #{$important-rule};\n\n      // Add @alternate to annotations.\n      $gss: map.merge(\n        $gss,\n        (\n          alternate: true,\n        )\n      );\n    }\n\n    @include gss.annotate($gss);\n    #{$property}: #{$value}#{$important-rule};\n  }\n}\n\n/// Unpacks shorthand values for CSS properties (i.e. lists of 1-3 values).\n/// If a list of 4 values is given, it is returned as-is.\n///\n/// Examples:\n///\n/// unpack-value(4px) => 4px 4px 4px 4px\n/// unpack-value(4px 2px) => 4px 2px 4px 2px\n/// unpack-value(4px 2px 2px) => 4px 2px 2px 2px\n/// unpack-value(4px 2px 0 2px) => 4px 2px 0 2px\n///\n/// @param {Number | Map | List} $value - List of 1 to 4 value numbers.\n/// @return {List} a List of 4 value numbers.\n@function unpack-value($value) {\n  @if meta.type-of($value) == 'map' or list.length($value) == 1 {\n    @return $value $value $value $value;\n  } @else if list.length($value) == 4 {\n    @return $value;\n  } @else if list.length($value) == 3 {\n    @return list.nth($value, 1) list.nth($value, 2) list.nth($value, 3)\n      list.nth($value, 2);\n  } @else if list.length($value) == 2 {\n    @return list.nth($value, 1) list.nth($value, 2) list.nth($value, 1)\n      list.nth($value, 2);\n  }\n\n  @error \"Invalid CSS property value: '#{$value}' is more than 4 values\";\n}\n","/* For desktop, the content should be aligned with the page title. */\nhtml {\n  --mat-ripple-color: rgba(0, 0, 0, 0.1);\n}\n\nhtml {\n  --mat-option-selected-state-label-text-color: #3f51b5;\n  --mat-option-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-option-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-selected-state-layer-color: rgba(0, 0, 0, 0.04);\n}\n\n.mat-accent {\n  --mat-option-selected-state-label-text-color: #ff4081;\n  --mat-option-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-option-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-selected-state-layer-color: rgba(0, 0, 0, 0.04);\n}\n\n.mat-warn {\n  --mat-option-selected-state-label-text-color: #f44336;\n  --mat-option-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-option-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-selected-state-layer-color: rgba(0, 0, 0, 0.04);\n}\n\nhtml {\n  --mat-optgroup-label-text-color: rgba(0, 0, 0, 0.87);\n}\n\n.mat-primary {\n  --mat-full-pseudo-checkbox-selected-icon-color: #3f51b5;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #3f51b5;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\nhtml {\n  --mat-full-pseudo-checkbox-selected-icon-color: #ff4081;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #ff4081;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\n.mat-accent {\n  --mat-full-pseudo-checkbox-selected-icon-color: #ff4081;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #ff4081;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\n.mat-warn {\n  --mat-full-pseudo-checkbox-selected-icon-color: #f44336;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #f44336;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\nhtml {\n  --mat-app-background-color: #fafafa;\n  --mat-app-text-color: rgba(0, 0, 0, 0.87);\n}\n\n.mat-elevation-z0, .mat-mdc-elevation-specific.mat-elevation-z0 {\n  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z1, .mat-mdc-elevation-specific.mat-elevation-z1 {\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z2, .mat-mdc-elevation-specific.mat-elevation-z2 {\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z3, .mat-mdc-elevation-specific.mat-elevation-z3 {\n  box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z4, .mat-mdc-elevation-specific.mat-elevation-z4 {\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z5, .mat-mdc-elevation-specific.mat-elevation-z5 {\n  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 5px 8px 0px rgba(0, 0, 0, 0.14), 0px 1px 14px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z6, .mat-mdc-elevation-specific.mat-elevation-z6 {\n  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z7, .mat-mdc-elevation-specific.mat-elevation-z7 {\n  box-shadow: 0px 4px 5px -2px rgba(0, 0, 0, 0.2), 0px 7px 10px 1px rgba(0, 0, 0, 0.14), 0px 2px 16px 1px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z8, .mat-mdc-elevation-specific.mat-elevation-z8 {\n  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z9, .mat-mdc-elevation-specific.mat-elevation-z9 {\n  box-shadow: 0px 5px 6px -3px rgba(0, 0, 0, 0.2), 0px 9px 12px 1px rgba(0, 0, 0, 0.14), 0px 3px 16px 2px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z10, .mat-mdc-elevation-specific.mat-elevation-z10 {\n  box-shadow: 0px 6px 6px -3px rgba(0, 0, 0, 0.2), 0px 10px 14px 1px rgba(0, 0, 0, 0.14), 0px 4px 18px 3px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z11, .mat-mdc-elevation-specific.mat-elevation-z11 {\n  box-shadow: 0px 6px 7px -4px rgba(0, 0, 0, 0.2), 0px 11px 15px 1px rgba(0, 0, 0, 0.14), 0px 4px 20px 3px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z12, .mat-mdc-elevation-specific.mat-elevation-z12 {\n  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z13, .mat-mdc-elevation-specific.mat-elevation-z13 {\n  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 13px 19px 2px rgba(0, 0, 0, 0.14), 0px 5px 24px 4px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z14, .mat-mdc-elevation-specific.mat-elevation-z14 {\n  box-shadow: 0px 7px 9px -4px rgba(0, 0, 0, 0.2), 0px 14px 21px 2px rgba(0, 0, 0, 0.14), 0px 5px 26px 4px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z15, .mat-mdc-elevation-specific.mat-elevation-z15 {\n  box-shadow: 0px 8px 9px -5px rgba(0, 0, 0, 0.2), 0px 15px 22px 2px rgba(0, 0, 0, 0.14), 0px 6px 28px 5px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z16, .mat-mdc-elevation-specific.mat-elevation-z16 {\n  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z17, .mat-mdc-elevation-specific.mat-elevation-z17 {\n  box-shadow: 0px 8px 11px -5px rgba(0, 0, 0, 0.2), 0px 17px 26px 2px rgba(0, 0, 0, 0.14), 0px 6px 32px 5px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z18, .mat-mdc-elevation-specific.mat-elevation-z18 {\n  box-shadow: 0px 9px 11px -5px rgba(0, 0, 0, 0.2), 0px 18px 28px 2px rgba(0, 0, 0, 0.14), 0px 7px 34px 6px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z19, .mat-mdc-elevation-specific.mat-elevation-z19 {\n  box-shadow: 0px 9px 12px -6px rgba(0, 0, 0, 0.2), 0px 19px 29px 2px rgba(0, 0, 0, 0.14), 0px 7px 36px 6px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z20, .mat-mdc-elevation-specific.mat-elevation-z20 {\n  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 20px 31px 3px rgba(0, 0, 0, 0.14), 0px 8px 38px 7px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z21, .mat-mdc-elevation-specific.mat-elevation-z21 {\n  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 21px 33px 3px rgba(0, 0, 0, 0.14), 0px 8px 40px 7px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z22, .mat-mdc-elevation-specific.mat-elevation-z22 {\n  box-shadow: 0px 10px 14px -6px rgba(0, 0, 0, 0.2), 0px 22px 35px 3px rgba(0, 0, 0, 0.14), 0px 8px 42px 7px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z23, .mat-mdc-elevation-specific.mat-elevation-z23 {\n  box-shadow: 0px 11px 14px -7px rgba(0, 0, 0, 0.2), 0px 23px 36px 3px rgba(0, 0, 0, 0.14), 0px 9px 44px 8px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z24, .mat-mdc-elevation-specific.mat-elevation-z24 {\n  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n}\n\n.mat-theme-loaded-marker {\n  display: none;\n}\n\nhtml {\n  --mat-option-label-text-font: Roboto, sans-serif;\n  --mat-option-label-text-line-height: 24px;\n  --mat-option-label-text-size: 16px;\n  --mat-option-label-text-tracking: 0.03125em;\n  --mat-option-label-text-weight: 400;\n}\n\nhtml {\n  --mat-optgroup-label-text-font: Roboto, sans-serif;\n  --mat-optgroup-label-text-line-height: 24px;\n  --mat-optgroup-label-text-size: 16px;\n  --mat-optgroup-label-text-tracking: 0.03125em;\n  --mat-optgroup-label-text-weight: 400;\n}\n\nhtml {\n  --mdc-elevated-card-container-shape: 4px;\n  --mdc-outlined-card-container-shape: 4px;\n  --mdc-outlined-card-outline-width: 1px;\n}\n\nhtml {\n  --mdc-elevated-card-container-color: white;\n  --mdc-elevated-card-container-elevation: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n  --mdc-outlined-card-container-color: white;\n  --mdc-outlined-card-outline-color: rgba(0, 0, 0, 0.12);\n  --mdc-outlined-card-container-elevation: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n  --mat-card-subtitle-text-color: rgba(0, 0, 0, 0.54);\n}\n\nhtml {\n  --mat-card-title-text-font: Roboto, sans-serif;\n  --mat-card-title-text-line-height: 32px;\n  --mat-card-title-text-size: 20px;\n  --mat-card-title-text-tracking: 0.0125em;\n  --mat-card-title-text-weight: 500;\n  --mat-card-subtitle-text-font: Roboto, sans-serif;\n  --mat-card-subtitle-text-line-height: 22px;\n  --mat-card-subtitle-text-size: 14px;\n  --mat-card-subtitle-text-tracking: 0.0071428571em;\n  --mat-card-subtitle-text-weight: 500;\n}\n\nhtml {\n  --mdc-linear-progress-active-indicator-height: 4px;\n  --mdc-linear-progress-track-height: 4px;\n  --mdc-linear-progress-track-shape: 0;\n}\n\n.mat-mdc-progress-bar {\n  --mdc-linear-progress-active-indicator-color: #3f51b5;\n  --mdc-linear-progress-track-color: rgba(63, 81, 181, 0.25);\n}\n.mat-mdc-progress-bar.mat-accent {\n  --mdc-linear-progress-active-indicator-color: #ff4081;\n  --mdc-linear-progress-track-color: rgba(255, 64, 129, 0.25);\n}\n.mat-mdc-progress-bar.mat-warn {\n  --mdc-linear-progress-active-indicator-color: #f44336;\n  --mdc-linear-progress-track-color: rgba(244, 67, 54, 0.25);\n}\n\nhtml {\n  --mdc-plain-tooltip-container-shape: 4px;\n  --mdc-plain-tooltip-supporting-text-line-height: 16px;\n}\n\nhtml {\n  --mdc-plain-tooltip-container-color: #616161;\n  --mdc-plain-tooltip-supporting-text-color: #fff;\n}\n\nhtml {\n  --mdc-plain-tooltip-supporting-text-font: Roboto, sans-serif;\n  --mdc-plain-tooltip-supporting-text-size: 12px;\n  --mdc-plain-tooltip-supporting-text-weight: 400;\n  --mdc-plain-tooltip-supporting-text-tracking: 0.0333333333em;\n}\n\nhtml {\n  --mdc-filled-text-field-active-indicator-height: 1px;\n  --mdc-filled-text-field-focus-active-indicator-height: 2px;\n  --mdc-filled-text-field-container-shape: 4px;\n  --mdc-outlined-text-field-outline-width: 1px;\n  --mdc-outlined-text-field-focus-outline-width: 2px;\n  --mdc-outlined-text-field-container-shape: 4px;\n}\n\nhtml {\n  --mdc-filled-text-field-caret-color: #3f51b5;\n  --mdc-filled-text-field-focus-active-indicator-color: #3f51b5;\n  --mdc-filled-text-field-focus-label-text-color: rgba(63, 81, 181, 0.87);\n  --mdc-filled-text-field-container-color: whitesmoke;\n  --mdc-filled-text-field-disabled-container-color: #fafafa;\n  --mdc-filled-text-field-label-text-color: rgba(0, 0, 0, 0.6);\n  --mdc-filled-text-field-hover-label-text-color: rgba(0, 0, 0, 0.6);\n  --mdc-filled-text-field-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-filled-text-field-input-text-color: rgba(0, 0, 0, 0.87);\n  --mdc-filled-text-field-disabled-input-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-filled-text-field-input-text-placeholder-color: rgba(0, 0, 0, 0.6);\n  --mdc-filled-text-field-error-hover-label-text-color: #f44336;\n  --mdc-filled-text-field-error-focus-label-text-color: #f44336;\n  --mdc-filled-text-field-error-label-text-color: #f44336;\n  --mdc-filled-text-field-error-caret-color: #f44336;\n  --mdc-filled-text-field-active-indicator-color: rgba(0, 0, 0, 0.42);\n  --mdc-filled-text-field-disabled-active-indicator-color: rgba(0, 0, 0, 0.06);\n  --mdc-filled-text-field-hover-active-indicator-color: rgba(0, 0, 0, 0.87);\n  --mdc-filled-text-field-error-active-indicator-color: #f44336;\n  --mdc-filled-text-field-error-focus-active-indicator-color: #f44336;\n  --mdc-filled-text-field-error-hover-active-indicator-color: #f44336;\n  --mdc-outlined-text-field-caret-color: #3f51b5;\n  --mdc-outlined-text-field-focus-outline-color: #3f51b5;\n  --mdc-outlined-text-field-focus-label-text-color: rgba(63, 81, 181, 0.87);\n  --mdc-outlined-text-field-label-text-color: rgba(0, 0, 0, 0.6);\n  --mdc-outlined-text-field-hover-label-text-color: rgba(0, 0, 0, 0.6);\n  --mdc-outlined-text-field-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-outlined-text-field-input-text-color: rgba(0, 0, 0, 0.87);\n  --mdc-outlined-text-field-disabled-input-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-outlined-text-field-input-text-placeholder-color: rgba(0, 0, 0, 0.6);\n  --mdc-outlined-text-field-error-caret-color: #f44336;\n  --mdc-outlined-text-field-error-focus-label-text-color: #f44336;\n  --mdc-outlined-text-field-error-label-text-color: #f44336;\n  --mdc-outlined-text-field-error-hover-label-text-color: #f44336;\n  --mdc-outlined-text-field-outline-color: rgba(0, 0, 0, 0.38);\n  --mdc-outlined-text-field-disabled-outline-color: rgba(0, 0, 0, 0.06);\n  --mdc-outlined-text-field-hover-outline-color: rgba(0, 0, 0, 0.87);\n  --mdc-outlined-text-field-error-focus-outline-color: #f44336;\n  --mdc-outlined-text-field-error-hover-outline-color: #f44336;\n  --mdc-outlined-text-field-error-outline-color: #f44336;\n  --mat-form-field-focus-select-arrow-color: rgba(63, 81, 181, 0.87);\n  --mat-form-field-disabled-input-text-placeholder-color: rgba(0, 0, 0, 0.38);\n  --mat-form-field-state-layer-color: rgba(0, 0, 0, 0.87);\n  --mat-form-field-error-text-color: #f44336;\n  --mat-form-field-select-option-text-color: inherit;\n  --mat-form-field-select-disabled-option-text-color: GrayText;\n  --mat-form-field-leading-icon-color: unset;\n  --mat-form-field-disabled-leading-icon-color: unset;\n  --mat-form-field-trailing-icon-color: unset;\n  --mat-form-field-disabled-trailing-icon-color: unset;\n  --mat-form-field-error-focus-trailing-icon-color: unset;\n  --mat-form-field-error-hover-trailing-icon-color: unset;\n  --mat-form-field-error-trailing-icon-color: unset;\n  --mat-form-field-enabled-select-arrow-color: rgba(0, 0, 0, 0.54);\n  --mat-form-field-disabled-select-arrow-color: rgba(0, 0, 0, 0.38);\n  --mat-form-field-hover-state-layer-opacity: 0.04;\n  --mat-form-field-focus-state-layer-opacity: 0.08;\n}\n\n.mat-mdc-form-field.mat-accent {\n  --mdc-filled-text-field-caret-color: #ff4081;\n  --mdc-filled-text-field-focus-active-indicator-color: #ff4081;\n  --mdc-filled-text-field-focus-label-text-color: rgba(255, 64, 129, 0.87);\n  --mdc-outlined-text-field-caret-color: #ff4081;\n  --mdc-outlined-text-field-focus-outline-color: #ff4081;\n  --mdc-outlined-text-field-focus-label-text-color: rgba(255, 64, 129, 0.87);\n  --mat-form-field-focus-select-arrow-color: rgba(255, 64, 129, 0.87);\n}\n\n.mat-mdc-form-field.mat-warn {\n  --mdc-filled-text-field-caret-color: #f44336;\n  --mdc-filled-text-field-focus-active-indicator-color: #f44336;\n  --mdc-filled-text-field-focus-label-text-color: rgba(244, 67, 54, 0.87);\n  --mdc-outlined-text-field-caret-color: #f44336;\n  --mdc-outlined-text-field-focus-outline-color: #f44336;\n  --mdc-outlined-text-field-focus-label-text-color: rgba(244, 67, 54, 0.87);\n  --mat-form-field-focus-select-arrow-color: rgba(244, 67, 54, 0.87);\n}\n\nhtml {\n  --mat-form-field-container-height: 56px;\n  --mat-form-field-filled-label-display: block;\n  --mat-form-field-container-vertical-padding: 16px;\n  --mat-form-field-filled-with-label-container-padding-top: 24px;\n  --mat-form-field-filled-with-label-container-padding-bottom: 8px;\n}\n\nhtml {\n  --mdc-filled-text-field-label-text-font: Roboto, sans-serif;\n  --mdc-filled-text-field-label-text-size: 16px;\n  --mdc-filled-text-field-label-text-tracking: 0.03125em;\n  --mdc-filled-text-field-label-text-weight: 400;\n  --mdc-outlined-text-field-label-text-font: Roboto, sans-serif;\n  --mdc-outlined-text-field-label-text-size: 16px;\n  --mdc-outlined-text-field-label-text-tracking: 0.03125em;\n  --mdc-outlined-text-field-label-text-weight: 400;\n  --mat-form-field-container-text-font: Roboto, sans-serif;\n  --mat-form-field-container-text-line-height: 24px;\n  --mat-form-field-container-text-size: 16px;\n  --mat-form-field-container-text-tracking: 0.03125em;\n  --mat-form-field-container-text-weight: 400;\n  --mat-form-field-outlined-label-text-populated-size: 16px;\n  --mat-form-field-subscript-text-font: Roboto, sans-serif;\n  --mat-form-field-subscript-text-line-height: 20px;\n  --mat-form-field-subscript-text-size: 12px;\n  --mat-form-field-subscript-text-tracking: 0.0333333333em;\n  --mat-form-field-subscript-text-weight: 400;\n}\n\nhtml {\n  --mat-select-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-select-panel-background-color: white;\n  --mat-select-enabled-trigger-text-color: rgba(0, 0, 0, 0.87);\n  --mat-select-disabled-trigger-text-color: rgba(0, 0, 0, 0.38);\n  --mat-select-placeholder-text-color: rgba(0, 0, 0, 0.6);\n  --mat-select-enabled-arrow-color: rgba(0, 0, 0, 0.54);\n  --mat-select-disabled-arrow-color: rgba(0, 0, 0, 0.38);\n  --mat-select-focused-arrow-color: rgba(63, 81, 181, 0.87);\n  --mat-select-invalid-arrow-color: rgba(244, 67, 54, 0.87);\n}\nhtml .mat-mdc-form-field.mat-accent {\n  --mat-select-panel-background-color: white;\n  --mat-select-enabled-trigger-text-color: rgba(0, 0, 0, 0.87);\n  --mat-select-disabled-trigger-text-color: rgba(0, 0, 0, 0.38);\n  --mat-select-placeholder-text-color: rgba(0, 0, 0, 0.6);\n  --mat-select-enabled-arrow-color: rgba(0, 0, 0, 0.54);\n  --mat-select-disabled-arrow-color: rgba(0, 0, 0, 0.38);\n  --mat-select-focused-arrow-color: rgba(255, 64, 129, 0.87);\n  --mat-select-invalid-arrow-color: rgba(244, 67, 54, 0.87);\n}\nhtml .mat-mdc-form-field.mat-warn {\n  --mat-select-panel-background-color: white;\n  --mat-select-enabled-trigger-text-color: rgba(0, 0, 0, 0.87);\n  --mat-select-disabled-trigger-text-color: rgba(0, 0, 0, 0.38);\n  --mat-select-placeholder-text-color: rgba(0, 0, 0, 0.6);\n  --mat-select-enabled-arrow-color: rgba(0, 0, 0, 0.54);\n  --mat-select-disabled-arrow-color: rgba(0, 0, 0, 0.38);\n  --mat-select-focused-arrow-color: rgba(244, 67, 54, 0.87);\n  --mat-select-invalid-arrow-color: rgba(244, 67, 54, 0.87);\n}\n\nhtml {\n  --mat-select-arrow-transform: translateY(-8px);\n}\n\nhtml {\n  --mat-select-trigger-text-font: Roboto, sans-serif;\n  --mat-select-trigger-text-line-height: 24px;\n  --mat-select-trigger-text-size: 16px;\n  --mat-select-trigger-text-tracking: 0.03125em;\n  --mat-select-trigger-text-weight: 400;\n}\n\nhtml {\n  --mat-autocomplete-container-shape: 4px;\n  --mat-autocomplete-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-autocomplete-background-color: white;\n}\n\nhtml {\n  --mdc-dialog-container-elevation-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n  --mdc-dialog-container-shadow-color: #000;\n  --mdc-dialog-container-shape: 4px;\n  --mat-dialog-container-max-width: 80vw;\n  --mat-dialog-container-small-max-width: 80vw;\n  --mat-dialog-container-min-width: 0;\n  --mat-dialog-actions-alignment: start;\n  --mat-dialog-actions-padding: 8px;\n  --mat-dialog-content-padding: 20px 24px;\n  --mat-dialog-with-actions-content-padding: 20px 24px;\n  --mat-dialog-headline-padding: 0 24px 9px;\n}\n\nhtml {\n  --mdc-dialog-container-color: white;\n  --mdc-dialog-subhead-color: rgba(0, 0, 0, 0.87);\n  --mdc-dialog-supporting-text-color: rgba(0, 0, 0, 0.6);\n}\n\nhtml {\n  --mdc-dialog-subhead-font: Roboto, sans-serif;\n  --mdc-dialog-subhead-line-height: 32px;\n  --mdc-dialog-subhead-size: 20px;\n  --mdc-dialog-subhead-weight: 500;\n  --mdc-dialog-subhead-tracking: 0.0125em;\n  --mdc-dialog-supporting-text-font: Roboto, sans-serif;\n  --mdc-dialog-supporting-text-line-height: 24px;\n  --mdc-dialog-supporting-text-size: 16px;\n  --mdc-dialog-supporting-text-weight: 400;\n  --mdc-dialog-supporting-text-tracking: 0.03125em;\n}\n\n.mat-mdc-standard-chip {\n  --mdc-chip-container-shape-family: rounded;\n  --mdc-chip-container-shape-radius: 16px 16px 16px 16px;\n  --mdc-chip-with-avatar-avatar-shape-family: rounded;\n  --mdc-chip-with-avatar-avatar-shape-radius: 14px 14px 14px 14px;\n  --mdc-chip-with-avatar-avatar-size: 28px;\n  --mdc-chip-with-icon-icon-size: 18px;\n  --mdc-chip-outline-width: 0;\n  --mdc-chip-outline-color: transparent;\n  --mdc-chip-disabled-outline-color: transparent;\n  --mdc-chip-focus-outline-color: transparent;\n  --mdc-chip-hover-state-layer-opacity: 0.04;\n  --mdc-chip-with-avatar-disabled-avatar-opacity: 1;\n  --mdc-chip-flat-selected-outline-width: 0;\n  --mdc-chip-selected-hover-state-layer-opacity: 0.04;\n  --mdc-chip-with-trailing-icon-disabled-trailing-icon-opacity: 1;\n  --mdc-chip-with-icon-disabled-icon-opacity: 1;\n  --mat-chip-disabled-container-opacity: 0.4;\n  --mat-chip-trailing-action-opacity: 0.54;\n  --mat-chip-trailing-action-focus-opacity: 1;\n  --mat-chip-trailing-action-state-layer-color: transparent;\n  --mat-chip-selected-trailing-action-state-layer-color: transparent;\n  --mat-chip-trailing-action-hover-state-layer-opacity: 0;\n  --mat-chip-trailing-action-focus-state-layer-opacity: 0;\n}\n\n.mat-mdc-standard-chip {\n  --mdc-chip-disabled-label-text-color: #212121;\n  --mdc-chip-elevated-container-color: #e0e0e0;\n  --mdc-chip-elevated-selected-container-color: #e0e0e0;\n  --mdc-chip-elevated-disabled-container-color: #e0e0e0;\n  --mdc-chip-flat-disabled-selected-container-color: #e0e0e0;\n  --mdc-chip-focus-state-layer-color: black;\n  --mdc-chip-hover-state-layer-color: black;\n  --mdc-chip-selected-hover-state-layer-color: black;\n  --mdc-chip-focus-state-layer-opacity: 0.12;\n  --mdc-chip-selected-focus-state-layer-color: black;\n  --mdc-chip-selected-focus-state-layer-opacity: 0.12;\n  --mdc-chip-label-text-color: #212121;\n  --mdc-chip-selected-label-text-color: #212121;\n  --mdc-chip-with-icon-icon-color: #212121;\n  --mdc-chip-with-icon-disabled-icon-color: #212121;\n  --mdc-chip-with-icon-selected-icon-color: #212121;\n  --mdc-chip-with-trailing-icon-disabled-trailing-icon-color: #212121;\n  --mdc-chip-with-trailing-icon-trailing-icon-color: #212121;\n  --mat-chip-selected-disabled-trailing-icon-color: #212121;\n  --mat-chip-selected-trailing-icon-color: #212121;\n}\n.mat-mdc-standard-chip.mat-mdc-chip-selected.mat-primary, .mat-mdc-standard-chip.mat-mdc-chip-highlighted.mat-primary {\n  --mdc-chip-disabled-label-text-color: white;\n  --mdc-chip-elevated-container-color: #3f51b5;\n  --mdc-chip-elevated-selected-container-color: #3f51b5;\n  --mdc-chip-elevated-disabled-container-color: #3f51b5;\n  --mdc-chip-flat-disabled-selected-container-color: #3f51b5;\n  --mdc-chip-focus-state-layer-color: black;\n  --mdc-chip-hover-state-layer-color: black;\n  --mdc-chip-selected-hover-state-layer-color: black;\n  --mdc-chip-focus-state-layer-opacity: 0.12;\n  --mdc-chip-selected-focus-state-layer-color: black;\n  --mdc-chip-selected-focus-state-layer-opacity: 0.12;\n  --mdc-chip-label-text-color: white;\n  --mdc-chip-selected-label-text-color: white;\n  --mdc-chip-with-icon-icon-color: white;\n  --mdc-chip-with-icon-disabled-icon-color: white;\n  --mdc-chip-with-icon-selected-icon-color: white;\n  --mdc-chip-with-trailing-icon-disabled-trailing-icon-color: white;\n  --mdc-chip-with-trailing-icon-trailing-icon-color: white;\n  --mat-chip-selected-disabled-trailing-icon-color: white;\n  --mat-chip-selected-trailing-icon-color: white;\n}\n.mat-mdc-standard-chip.mat-mdc-chip-selected.mat-accent, .mat-mdc-standard-chip.mat-mdc-chip-highlighted.mat-accent {\n  --mdc-chip-disabled-label-text-color: white;\n  --mdc-chip-elevated-container-color: #ff4081;\n  --mdc-chip-elevated-selected-container-color: #ff4081;\n  --mdc-chip-elevated-disabled-container-color: #ff4081;\n  --mdc-chip-flat-disabled-selected-container-color: #ff4081;\n  --mdc-chip-focus-state-layer-color: black;\n  --mdc-chip-hover-state-layer-color: black;\n  --mdc-chip-selected-hover-state-layer-color: black;\n  --mdc-chip-focus-state-layer-opacity: 0.12;\n  --mdc-chip-selected-focus-state-layer-color: black;\n  --mdc-chip-selected-focus-state-layer-opacity: 0.12;\n  --mdc-chip-label-text-color: white;\n  --mdc-chip-selected-label-text-color: white;\n  --mdc-chip-with-icon-icon-color: white;\n  --mdc-chip-with-icon-disabled-icon-color: white;\n  --mdc-chip-with-icon-selected-icon-color: white;\n  --mdc-chip-with-trailing-icon-disabled-trailing-icon-color: white;\n  --mdc-chip-with-trailing-icon-trailing-icon-color: white;\n  --mat-chip-selected-disabled-trailing-icon-color: white;\n  --mat-chip-selected-trailing-icon-color: white;\n}\n.mat-mdc-standard-chip.mat-mdc-chip-selected.mat-warn, .mat-mdc-standard-chip.mat-mdc-chip-highlighted.mat-warn {\n  --mdc-chip-disabled-label-text-color: white;\n  --mdc-chip-elevated-container-color: #f44336;\n  --mdc-chip-elevated-selected-container-color: #f44336;\n  --mdc-chip-elevated-disabled-container-color: #f44336;\n  --mdc-chip-flat-disabled-selected-container-color: #f44336;\n  --mdc-chip-focus-state-layer-color: black;\n  --mdc-chip-hover-state-layer-color: black;\n  --mdc-chip-selected-hover-state-layer-color: black;\n  --mdc-chip-focus-state-layer-opacity: 0.12;\n  --mdc-chip-selected-focus-state-layer-color: black;\n  --mdc-chip-selected-focus-state-layer-opacity: 0.12;\n  --mdc-chip-label-text-color: white;\n  --mdc-chip-selected-label-text-color: white;\n  --mdc-chip-with-icon-icon-color: white;\n  --mdc-chip-with-icon-disabled-icon-color: white;\n  --mdc-chip-with-icon-selected-icon-color: white;\n  --mdc-chip-with-trailing-icon-disabled-trailing-icon-color: white;\n  --mdc-chip-with-trailing-icon-trailing-icon-color: white;\n  --mat-chip-selected-disabled-trailing-icon-color: white;\n  --mat-chip-selected-trailing-icon-color: white;\n}\n\n.mat-mdc-chip.mat-mdc-standard-chip {\n  --mdc-chip-container-height: 32px;\n}\n\n.mat-mdc-standard-chip {\n  --mdc-chip-label-text-font: Roboto, sans-serif;\n  --mdc-chip-label-text-line-height: 20px;\n  --mdc-chip-label-text-size: 14px;\n  --mdc-chip-label-text-tracking: 0.0178571429em;\n  --mdc-chip-label-text-weight: 400;\n}\n\nhtml {\n  --mdc-switch-disabled-selected-icon-opacity: 0.38;\n  --mdc-switch-disabled-track-opacity: 0.12;\n  --mdc-switch-disabled-unselected-icon-opacity: 0.38;\n  --mdc-switch-handle-height: 20px;\n  --mdc-switch-handle-shape: 10px;\n  --mdc-switch-handle-width: 20px;\n  --mdc-switch-selected-icon-size: 18px;\n  --mdc-switch-track-height: 14px;\n  --mdc-switch-track-shape: 7px;\n  --mdc-switch-track-width: 36px;\n  --mdc-switch-unselected-icon-size: 18px;\n  --mdc-switch-selected-focus-state-layer-opacity: 0.12;\n  --mdc-switch-selected-hover-state-layer-opacity: 0.04;\n  --mdc-switch-selected-pressed-state-layer-opacity: 0.1;\n  --mdc-switch-unselected-focus-state-layer-opacity: 0.12;\n  --mdc-switch-unselected-hover-state-layer-opacity: 0.04;\n  --mdc-switch-unselected-pressed-state-layer-opacity: 0.1;\n  --mat-switch-disabled-selected-handle-opacity: 0.38;\n  --mat-switch-disabled-unselected-handle-opacity: 0.38;\n  --mat-switch-unselected-handle-size: 20px;\n  --mat-switch-selected-handle-size: 20px;\n  --mat-switch-pressed-handle-size: 20px;\n  --mat-switch-with-icon-handle-size: 20px;\n  --mat-switch-selected-handle-horizontal-margin: 0;\n  --mat-switch-selected-with-icon-handle-horizontal-margin: 0;\n  --mat-switch-selected-pressed-handle-horizontal-margin: 0;\n  --mat-switch-unselected-handle-horizontal-margin: 0;\n  --mat-switch-unselected-with-icon-handle-horizontal-margin: 0;\n  --mat-switch-unselected-pressed-handle-horizontal-margin: 0;\n  --mat-switch-visible-track-opacity: 1;\n  --mat-switch-hidden-track-opacity: 1;\n  --mat-switch-visible-track-transition: transform 75ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  --mat-switch-hidden-track-transition: transform 75ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n  --mat-switch-track-outline-width: 1px;\n  --mat-switch-track-outline-color: transparent;\n  --mat-switch-disabled-unselected-track-outline-width: 1px;\n  --mat-switch-disabled-unselected-track-outline-color: transparent;\n}\n\nhtml {\n  --mdc-switch-selected-focus-state-layer-color: #3949ab;\n  --mdc-switch-selected-handle-color: #3949ab;\n  --mdc-switch-selected-hover-state-layer-color: #3949ab;\n  --mdc-switch-selected-pressed-state-layer-color: #3949ab;\n  --mdc-switch-selected-focus-handle-color: #1a237e;\n  --mdc-switch-selected-hover-handle-color: #1a237e;\n  --mdc-switch-selected-pressed-handle-color: #1a237e;\n  --mdc-switch-selected-focus-track-color: #7986cb;\n  --mdc-switch-selected-hover-track-color: #7986cb;\n  --mdc-switch-selected-pressed-track-color: #7986cb;\n  --mdc-switch-selected-track-color: #7986cb;\n  --mdc-switch-disabled-selected-handle-color: #424242;\n  --mdc-switch-disabled-selected-icon-color: #fff;\n  --mdc-switch-disabled-selected-track-color: #424242;\n  --mdc-switch-disabled-unselected-handle-color: #424242;\n  --mdc-switch-disabled-unselected-icon-color: #fff;\n  --mdc-switch-disabled-unselected-track-color: #424242;\n  --mdc-switch-handle-surface-color: var(--mdc-theme-surface, #fff);\n  --mdc-switch-handle-elevation-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n  --mdc-switch-handle-shadow-color: black;\n  --mdc-switch-disabled-handle-elevation-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n  --mdc-switch-selected-icon-color: #fff;\n  --mdc-switch-unselected-focus-handle-color: #212121;\n  --mdc-switch-unselected-focus-state-layer-color: #424242;\n  --mdc-switch-unselected-focus-track-color: #e0e0e0;\n  --mdc-switch-unselected-handle-color: #616161;\n  --mdc-switch-unselected-hover-handle-color: #212121;\n  --mdc-switch-unselected-hover-state-layer-color: #424242;\n  --mdc-switch-unselected-hover-track-color: #e0e0e0;\n  --mdc-switch-unselected-icon-color: #fff;\n  --mdc-switch-unselected-pressed-handle-color: #212121;\n  --mdc-switch-unselected-pressed-state-layer-color: #424242;\n  --mdc-switch-unselected-pressed-track-color: #e0e0e0;\n  --mdc-switch-unselected-track-color: #e0e0e0;\n  --mdc-switch-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n}\nhtml .mat-mdc-slide-toggle {\n  --mdc-form-field-label-text-color: rgba(0, 0, 0, 0.87);\n}\nhtml .mat-mdc-slide-toggle.mat-accent {\n  --mdc-switch-selected-focus-state-layer-color: #d81b60;\n  --mdc-switch-selected-handle-color: #d81b60;\n  --mdc-switch-selected-hover-state-layer-color: #d81b60;\n  --mdc-switch-selected-pressed-state-layer-color: #d81b60;\n  --mdc-switch-selected-focus-handle-color: #880e4f;\n  --mdc-switch-selected-hover-handle-color: #880e4f;\n  --mdc-switch-selected-pressed-handle-color: #880e4f;\n  --mdc-switch-selected-focus-track-color: #f06292;\n  --mdc-switch-selected-hover-track-color: #f06292;\n  --mdc-switch-selected-pressed-track-color: #f06292;\n  --mdc-switch-selected-track-color: #f06292;\n}\nhtml .mat-mdc-slide-toggle.mat-warn {\n  --mdc-switch-selected-focus-state-layer-color: #e53935;\n  --mdc-switch-selected-handle-color: #e53935;\n  --mdc-switch-selected-hover-state-layer-color: #e53935;\n  --mdc-switch-selected-pressed-state-layer-color: #e53935;\n  --mdc-switch-selected-focus-handle-color: #b71c1c;\n  --mdc-switch-selected-hover-handle-color: #b71c1c;\n  --mdc-switch-selected-pressed-handle-color: #b71c1c;\n  --mdc-switch-selected-focus-track-color: #e57373;\n  --mdc-switch-selected-hover-track-color: #e57373;\n  --mdc-switch-selected-pressed-track-color: #e57373;\n  --mdc-switch-selected-track-color: #e57373;\n}\n\nhtml {\n  --mdc-switch-state-layer-size: 40px;\n}\n\nhtml .mat-mdc-slide-toggle {\n  --mdc-form-field-label-text-font: Roboto, sans-serif;\n  --mdc-form-field-label-text-line-height: 20px;\n  --mdc-form-field-label-text-size: 14px;\n  --mdc-form-field-label-text-tracking: 0.0178571429em;\n  --mdc-form-field-label-text-weight: 400;\n}\n\nhtml {\n  --mdc-radio-disabled-selected-icon-opacity: 0.38;\n  --mdc-radio-disabled-unselected-icon-opacity: 0.38;\n  --mdc-radio-state-layer-size: 40px;\n}\n\n.mat-mdc-radio-button {\n  --mdc-form-field-label-text-color: rgba(0, 0, 0, 0.87);\n}\n.mat-mdc-radio-button.mat-primary {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #3f51b5;\n  --mdc-radio-selected-hover-icon-color: #3f51b5;\n  --mdc-radio-selected-icon-color: #3f51b5;\n  --mdc-radio-selected-pressed-icon-color: #3f51b5;\n  --mat-radio-ripple-color: #000;\n  --mat-radio-checked-ripple-color: #3f51b5;\n  --mat-radio-disabled-label-color: rgba(0, 0, 0, 0.38);\n}\n.mat-mdc-radio-button.mat-accent {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #ff4081;\n  --mdc-radio-selected-hover-icon-color: #ff4081;\n  --mdc-radio-selected-icon-color: #ff4081;\n  --mdc-radio-selected-pressed-icon-color: #ff4081;\n  --mat-radio-ripple-color: #000;\n  --mat-radio-checked-ripple-color: #ff4081;\n  --mat-radio-disabled-label-color: rgba(0, 0, 0, 0.38);\n}\n.mat-mdc-radio-button.mat-warn {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #f44336;\n  --mdc-radio-selected-hover-icon-color: #f44336;\n  --mdc-radio-selected-icon-color: #f44336;\n  --mdc-radio-selected-pressed-icon-color: #f44336;\n  --mat-radio-ripple-color: #000;\n  --mat-radio-checked-ripple-color: #f44336;\n  --mat-radio-disabled-label-color: rgba(0, 0, 0, 0.38);\n}\n\nhtml {\n  --mdc-radio-state-layer-size: 40px;\n  --mat-radio-touch-target-display: block;\n}\n\n.mat-mdc-radio-button {\n  --mdc-form-field-label-text-font: Roboto, sans-serif;\n  --mdc-form-field-label-text-line-height: 20px;\n  --mdc-form-field-label-text-size: 14px;\n  --mdc-form-field-label-text-tracking: 0.0178571429em;\n  --mdc-form-field-label-text-weight: 400;\n}\n\nhtml {\n  --mat-slider-value-indicator-width: auto;\n  --mat-slider-value-indicator-height: 32px;\n  --mat-slider-value-indicator-caret-display: block;\n  --mat-slider-value-indicator-border-radius: 4px;\n  --mat-slider-value-indicator-padding: 0 12px;\n  --mat-slider-value-indicator-text-transform: none;\n  --mat-slider-value-indicator-container-transform: translateX(-50%);\n  --mdc-slider-active-track-height: 6px;\n  --mdc-slider-active-track-shape: 9999px;\n  --mdc-slider-handle-height: 20px;\n  --mdc-slider-handle-shape: 50%;\n  --mdc-slider-handle-width: 20px;\n  --mdc-slider-inactive-track-height: 4px;\n  --mdc-slider-inactive-track-shape: 9999px;\n  --mdc-slider-with-overlap-handle-outline-width: 1px;\n  --mdc-slider-with-tick-marks-active-container-opacity: 0.6;\n  --mdc-slider-with-tick-marks-container-shape: 50%;\n  --mdc-slider-with-tick-marks-container-size: 2px;\n  --mdc-slider-with-tick-marks-inactive-container-opacity: 0.6;\n}\n\nhtml {\n  --mdc-slider-handle-color: #3f51b5;\n  --mdc-slider-focus-handle-color: #3f51b5;\n  --mdc-slider-hover-handle-color: #3f51b5;\n  --mdc-slider-active-track-color: #3f51b5;\n  --mdc-slider-inactive-track-color: #3f51b5;\n  --mdc-slider-with-tick-marks-inactive-container-color: #3f51b5;\n  --mdc-slider-with-tick-marks-active-container-color: white;\n  --mdc-slider-disabled-active-track-color: #000;\n  --mdc-slider-disabled-handle-color: #000;\n  --mdc-slider-disabled-inactive-track-color: #000;\n  --mdc-slider-label-container-color: #000;\n  --mdc-slider-label-label-text-color: #fff;\n  --mdc-slider-with-overlap-handle-outline-color: #fff;\n  --mdc-slider-with-tick-marks-disabled-container-color: #000;\n  --mdc-slider-handle-elevation: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n  --mat-slider-ripple-color: #3f51b5;\n  --mat-slider-hover-state-layer-color: rgba(63, 81, 181, 0.05);\n  --mat-slider-focus-state-layer-color: rgba(63, 81, 181, 0.2);\n  --mat-slider-value-indicator-opacity: 0.6;\n}\nhtml .mat-accent {\n  --mat-slider-ripple-color: #ff4081;\n  --mat-slider-hover-state-layer-color: rgba(255, 64, 129, 0.05);\n  --mat-slider-focus-state-layer-color: rgba(255, 64, 129, 0.2);\n  --mdc-slider-handle-color: #ff4081;\n  --mdc-slider-focus-handle-color: #ff4081;\n  --mdc-slider-hover-handle-color: #ff4081;\n  --mdc-slider-active-track-color: #ff4081;\n  --mdc-slider-inactive-track-color: #ff4081;\n  --mdc-slider-with-tick-marks-inactive-container-color: #ff4081;\n  --mdc-slider-with-tick-marks-active-container-color: white;\n}\nhtml .mat-warn {\n  --mat-slider-ripple-color: #f44336;\n  --mat-slider-hover-state-layer-color: rgba(244, 67, 54, 0.05);\n  --mat-slider-focus-state-layer-color: rgba(244, 67, 54, 0.2);\n  --mdc-slider-handle-color: #f44336;\n  --mdc-slider-focus-handle-color: #f44336;\n  --mdc-slider-hover-handle-color: #f44336;\n  --mdc-slider-active-track-color: #f44336;\n  --mdc-slider-inactive-track-color: #f44336;\n  --mdc-slider-with-tick-marks-inactive-container-color: #f44336;\n  --mdc-slider-with-tick-marks-active-container-color: white;\n}\n\nhtml {\n  --mdc-slider-label-label-text-font: Roboto, sans-serif;\n  --mdc-slider-label-label-text-size: 14px;\n  --mdc-slider-label-label-text-line-height: 22px;\n  --mdc-slider-label-label-text-tracking: 0.0071428571em;\n  --mdc-slider-label-label-text-weight: 500;\n}\n\nhtml {\n  --mat-menu-container-shape: 4px;\n  --mat-menu-divider-bottom-spacing: 0;\n  --mat-menu-divider-top-spacing: 0;\n  --mat-menu-item-spacing: 16px;\n  --mat-menu-item-icon-size: 24px;\n  --mat-menu-item-leading-spacing: 16px;\n  --mat-menu-item-trailing-spacing: 16px;\n  --mat-menu-item-with-icon-leading-spacing: 16px;\n  --mat-menu-item-with-icon-trailing-spacing: 16px;\n}\n\nhtml {\n  --mat-menu-item-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-menu-item-icon-color: rgba(0, 0, 0, 0.87);\n  --mat-menu-item-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-menu-item-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-menu-container-color: white;\n  --mat-menu-divider-color: rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-menu-item-label-text-font: Roboto, sans-serif;\n  --mat-menu-item-label-text-size: 16px;\n  --mat-menu-item-label-text-tracking: 0.03125em;\n  --mat-menu-item-label-text-line-height: 24px;\n  --mat-menu-item-label-text-weight: 400;\n}\n\nhtml {\n  --mdc-list-list-item-container-shape: 0;\n  --mdc-list-list-item-leading-avatar-shape: 50%;\n  --mdc-list-list-item-container-color: transparent;\n  --mdc-list-list-item-selected-container-color: transparent;\n  --mdc-list-list-item-leading-avatar-color: transparent;\n  --mdc-list-list-item-leading-icon-size: 24px;\n  --mdc-list-list-item-leading-avatar-size: 40px;\n  --mdc-list-list-item-trailing-icon-size: 24px;\n  --mdc-list-list-item-disabled-state-layer-color: transparent;\n  --mdc-list-list-item-disabled-state-layer-opacity: 0;\n  --mdc-list-list-item-disabled-label-text-opacity: 0.38;\n  --mdc-list-list-item-disabled-leading-icon-opacity: 0.38;\n  --mdc-list-list-item-disabled-trailing-icon-opacity: 0.38;\n  --mat-list-active-indicator-color: transparent;\n  --mat-list-active-indicator-shape: 0;\n}\n\nhtml {\n  --mdc-list-list-item-label-text-color: rgba(0, 0, 0, 0.87);\n  --mdc-list-list-item-supporting-text-color: rgba(0, 0, 0, 0.54);\n  --mdc-list-list-item-leading-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-trailing-supporting-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-trailing-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-selected-trailing-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-disabled-label-text-color: black;\n  --mdc-list-list-item-disabled-leading-icon-color: black;\n  --mdc-list-list-item-disabled-trailing-icon-color: black;\n  --mdc-list-list-item-hover-label-text-color: rgba(0, 0, 0, 0.87);\n  --mdc-list-list-item-hover-leading-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-hover-trailing-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-focus-label-text-color: rgba(0, 0, 0, 0.87);\n  --mdc-list-list-item-hover-state-layer-color: black;\n  --mdc-list-list-item-hover-state-layer-opacity: 0.04;\n  --mdc-list-list-item-focus-state-layer-color: black;\n  --mdc-list-list-item-focus-state-layer-opacity: 0.12;\n}\n\n.mdc-list-item__start,\n.mdc-list-item__end {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #3f51b5;\n  --mdc-radio-selected-hover-icon-color: #3f51b5;\n  --mdc-radio-selected-icon-color: #3f51b5;\n  --mdc-radio-selected-pressed-icon-color: #3f51b5;\n}\n\n.mat-accent .mdc-list-item__start,\n.mat-accent .mdc-list-item__end {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #ff4081;\n  --mdc-radio-selected-hover-icon-color: #ff4081;\n  --mdc-radio-selected-icon-color: #ff4081;\n  --mdc-radio-selected-pressed-icon-color: #ff4081;\n}\n\n.mat-warn .mdc-list-item__start,\n.mat-warn .mdc-list-item__end {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #f44336;\n  --mdc-radio-selected-hover-icon-color: #f44336;\n  --mdc-radio-selected-icon-color: #f44336;\n  --mdc-radio-selected-pressed-icon-color: #f44336;\n}\n\n.mat-mdc-list-option {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-icon-color: #3f51b5;\n  --mdc-checkbox-selected-hover-icon-color: #3f51b5;\n  --mdc-checkbox-selected-icon-color: #3f51b5;\n  --mdc-checkbox-selected-pressed-icon-color: #3f51b5;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #3f51b5;\n  --mdc-checkbox-selected-hover-state-layer-color: #3f51b5;\n  --mdc-checkbox-selected-pressed-state-layer-color: #3f51b5;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n}\n\n.mat-mdc-list-option.mat-accent {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-icon-color: #ff4081;\n  --mdc-checkbox-selected-hover-icon-color: #ff4081;\n  --mdc-checkbox-selected-icon-color: #ff4081;\n  --mdc-checkbox-selected-pressed-icon-color: #ff4081;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #ff4081;\n  --mdc-checkbox-selected-hover-state-layer-color: #ff4081;\n  --mdc-checkbox-selected-pressed-state-layer-color: #ff4081;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n}\n\n.mat-mdc-list-option.mat-warn {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-icon-color: #f44336;\n  --mdc-checkbox-selected-hover-icon-color: #f44336;\n  --mdc-checkbox-selected-icon-color: #f44336;\n  --mdc-checkbox-selected-pressed-icon-color: #f44336;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #f44336;\n  --mdc-checkbox-selected-hover-state-layer-color: #f44336;\n  --mdc-checkbox-selected-pressed-state-layer-color: #f44336;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n}\n\n.mat-mdc-list-base.mat-mdc-list-base .mdc-list-item--selected .mdc-list-item__primary-text,\n.mat-mdc-list-base.mat-mdc-list-base .mdc-list-item--activated .mdc-list-item__primary-text {\n  color: #3f51b5;\n}\n.mat-mdc-list-base.mat-mdc-list-base .mdc-list-item--selected.mdc-list-item--with-leading-icon .mdc-list-item__start,\n.mat-mdc-list-base.mat-mdc-list-base .mdc-list-item--activated.mdc-list-item--with-leading-icon .mdc-list-item__start {\n  color: #3f51b5;\n}\n\n.mat-mdc-list-base .mdc-list-item--disabled .mdc-list-item__start,\n.mat-mdc-list-base .mdc-list-item--disabled .mdc-list-item__content,\n.mat-mdc-list-base .mdc-list-item--disabled .mdc-list-item__end {\n  opacity: 1;\n}\n\nhtml {\n  --mdc-list-list-item-one-line-container-height: 48px;\n  --mdc-list-list-item-two-line-container-height: 64px;\n  --mdc-list-list-item-three-line-container-height: 88px;\n  --mat-list-list-item-leading-icon-start-space: 16px;\n  --mat-list-list-item-leading-icon-end-space: 32px;\n}\n\n.mdc-list-item__start,\n.mdc-list-item__end {\n  --mdc-radio-state-layer-size: 40px;\n}\n\n.mat-mdc-list-item.mdc-list-item--with-leading-avatar.mdc-list-item--with-one-line, .mat-mdc-list-item.mdc-list-item--with-leading-checkbox.mdc-list-item--with-one-line, .mat-mdc-list-item.mdc-list-item--with-leading-icon.mdc-list-item--with-one-line {\n  height: 56px;\n}\n.mat-mdc-list-item.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines, .mat-mdc-list-item.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines, .mat-mdc-list-item.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines {\n  height: 72px;\n}\n\nhtml {\n  --mdc-list-list-item-label-text-font: Roboto, sans-serif;\n  --mdc-list-list-item-label-text-line-height: 24px;\n  --mdc-list-list-item-label-text-size: 16px;\n  --mdc-list-list-item-label-text-tracking: 0.03125em;\n  --mdc-list-list-item-label-text-weight: 400;\n  --mdc-list-list-item-supporting-text-font: Roboto, sans-serif;\n  --mdc-list-list-item-supporting-text-line-height: 20px;\n  --mdc-list-list-item-supporting-text-size: 14px;\n  --mdc-list-list-item-supporting-text-tracking: 0.0178571429em;\n  --mdc-list-list-item-supporting-text-weight: 400;\n  --mdc-list-list-item-trailing-supporting-text-font: Roboto, sans-serif;\n  --mdc-list-list-item-trailing-supporting-text-line-height: 20px;\n  --mdc-list-list-item-trailing-supporting-text-size: 12px;\n  --mdc-list-list-item-trailing-supporting-text-tracking: 0.0333333333em;\n  --mdc-list-list-item-trailing-supporting-text-weight: 400;\n}\n\n.mdc-list-group__subheader {\n  font: 400 16px / 28px Roboto, sans-serif;\n  letter-spacing: 0.009375em;\n}\n\nhtml {\n  --mat-paginator-container-text-color: rgba(0, 0, 0, 0.87);\n  --mat-paginator-container-background-color: white;\n  --mat-paginator-enabled-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-paginator-disabled-icon-color: rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-paginator-container-size: 56px;\n  --mat-paginator-form-field-container-height: 40px;\n  --mat-paginator-form-field-container-vertical-padding: 8px;\n}\n\nhtml {\n  --mat-paginator-container-text-font: Roboto, sans-serif;\n  --mat-paginator-container-text-line-height: 20px;\n  --mat-paginator-container-text-size: 12px;\n  --mat-paginator-container-text-tracking: 0.0333333333em;\n  --mat-paginator-container-text-weight: 400;\n  --mat-paginator-select-trigger-text-size: 12px;\n}\n\nhtml {\n  --mdc-tab-indicator-active-indicator-height: 2px;\n  --mdc-tab-indicator-active-indicator-shape: 0;\n  --mdc-secondary-navigation-tab-container-height: 48px;\n  --mat-tab-header-divider-color: transparent;\n  --mat-tab-header-divider-height: 0;\n}\n\n.mat-mdc-tab-group, .mat-mdc-tab-nav-bar {\n  --mdc-tab-indicator-active-indicator-color: #3f51b5;\n  --mat-tab-header-disabled-ripple-color: rgba(0, 0, 0, 0.38);\n  --mat-tab-header-pagination-icon-color: #000;\n  --mat-tab-header-inactive-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-label-text-color: #3f51b5;\n  --mat-tab-header-active-ripple-color: #3f51b5;\n  --mat-tab-header-inactive-ripple-color: #3f51b5;\n  --mat-tab-header-inactive-focus-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-inactive-hover-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-focus-label-text-color: #3f51b5;\n  --mat-tab-header-active-hover-label-text-color: #3f51b5;\n  --mat-tab-header-active-focus-indicator-color: #3f51b5;\n  --mat-tab-header-active-hover-indicator-color: #3f51b5;\n}\n.mat-mdc-tab-group.mat-accent, .mat-mdc-tab-nav-bar.mat-accent {\n  --mdc-tab-indicator-active-indicator-color: #ff4081;\n  --mat-tab-header-disabled-ripple-color: rgba(0, 0, 0, 0.38);\n  --mat-tab-header-pagination-icon-color: #000;\n  --mat-tab-header-inactive-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-label-text-color: #ff4081;\n  --mat-tab-header-active-ripple-color: #ff4081;\n  --mat-tab-header-inactive-ripple-color: #ff4081;\n  --mat-tab-header-inactive-focus-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-inactive-hover-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-focus-label-text-color: #ff4081;\n  --mat-tab-header-active-hover-label-text-color: #ff4081;\n  --mat-tab-header-active-focus-indicator-color: #ff4081;\n  --mat-tab-header-active-hover-indicator-color: #ff4081;\n}\n.mat-mdc-tab-group.mat-warn, .mat-mdc-tab-nav-bar.mat-warn {\n  --mdc-tab-indicator-active-indicator-color: #f44336;\n  --mat-tab-header-disabled-ripple-color: rgba(0, 0, 0, 0.38);\n  --mat-tab-header-pagination-icon-color: #000;\n  --mat-tab-header-inactive-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-label-text-color: #f44336;\n  --mat-tab-header-active-ripple-color: #f44336;\n  --mat-tab-header-inactive-ripple-color: #f44336;\n  --mat-tab-header-inactive-focus-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-inactive-hover-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-focus-label-text-color: #f44336;\n  --mat-tab-header-active-hover-label-text-color: #f44336;\n  --mat-tab-header-active-focus-indicator-color: #f44336;\n  --mat-tab-header-active-hover-indicator-color: #f44336;\n}\n.mat-mdc-tab-group.mat-background-primary, .mat-mdc-tab-nav-bar.mat-background-primary {\n  --mat-tab-header-with-background-background-color: #3f51b5;\n  --mat-tab-header-with-background-foreground-color: white;\n}\n.mat-mdc-tab-group.mat-background-accent, .mat-mdc-tab-nav-bar.mat-background-accent {\n  --mat-tab-header-with-background-background-color: #ff4081;\n  --mat-tab-header-with-background-foreground-color: white;\n}\n.mat-mdc-tab-group.mat-background-warn, .mat-mdc-tab-nav-bar.mat-background-warn {\n  --mat-tab-header-with-background-background-color: #f44336;\n  --mat-tab-header-with-background-foreground-color: white;\n}\n\n.mat-mdc-tab-header {\n  --mdc-secondary-navigation-tab-container-height: 48px;\n}\n\n.mat-mdc-tab-header {\n  --mat-tab-header-label-text-font: Roboto, sans-serif;\n  --mat-tab-header-label-text-size: 14px;\n  --mat-tab-header-label-text-tracking: 0.0892857143em;\n  --mat-tab-header-label-text-line-height: 36px;\n  --mat-tab-header-label-text-weight: 500;\n}\n\nhtml {\n  --mdc-checkbox-disabled-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-state-layer-opacity: 0.16;\n  --mdc-checkbox-selected-hover-state-layer-opacity: 0.04;\n  --mdc-checkbox-selected-pressed-state-layer-opacity: 0.16;\n  --mdc-checkbox-unselected-focus-state-layer-opacity: 0.16;\n  --mdc-checkbox-unselected-hover-state-layer-opacity: 0.04;\n  --mdc-checkbox-unselected-pressed-state-layer-opacity: 0.16;\n}\n\nhtml {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-icon-color: #ff4081;\n  --mdc-checkbox-selected-hover-icon-color: #ff4081;\n  --mdc-checkbox-selected-icon-color: #ff4081;\n  --mdc-checkbox-selected-pressed-icon-color: #ff4081;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #ff4081;\n  --mdc-checkbox-selected-hover-state-layer-color: #ff4081;\n  --mdc-checkbox-selected-pressed-state-layer-color: #ff4081;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n  --mat-checkbox-disabled-label-color: rgba(0, 0, 0, 0.38);\n}\n\n.mat-mdc-checkbox {\n  --mdc-form-field-label-text-color: rgba(0, 0, 0, 0.87);\n}\n.mat-mdc-checkbox.mat-primary {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-icon-color: #3f51b5;\n  --mdc-checkbox-selected-hover-icon-color: #3f51b5;\n  --mdc-checkbox-selected-icon-color: #3f51b5;\n  --mdc-checkbox-selected-pressed-icon-color: #3f51b5;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #3f51b5;\n  --mdc-checkbox-selected-hover-state-layer-color: #3f51b5;\n  --mdc-checkbox-selected-pressed-state-layer-color: #3f51b5;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n}\n.mat-mdc-checkbox.mat-warn {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-icon-color: #f44336;\n  --mdc-checkbox-selected-hover-icon-color: #f44336;\n  --mdc-checkbox-selected-icon-color: #f44336;\n  --mdc-checkbox-selected-pressed-icon-color: #f44336;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #f44336;\n  --mdc-checkbox-selected-hover-state-layer-color: #f44336;\n  --mdc-checkbox-selected-pressed-state-layer-color: #f44336;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n}\n\nhtml {\n  --mdc-checkbox-state-layer-size: 40px;\n  --mat-checkbox-touch-target-display: block;\n}\n\n.mat-mdc-checkbox {\n  --mdc-form-field-label-text-font: Roboto, sans-serif;\n  --mdc-form-field-label-text-line-height: 20px;\n  --mdc-form-field-label-text-size: 14px;\n  --mdc-form-field-label-text-tracking: 0.0178571429em;\n  --mdc-form-field-label-text-weight: 400;\n}\n\nhtml {\n  --mdc-text-button-container-shape: 4px;\n  --mdc-text-button-keep-touch-target: false;\n  --mdc-filled-button-container-shape: 4px;\n  --mdc-filled-button-keep-touch-target: false;\n  --mdc-protected-button-container-shape: 4px;\n  --mdc-protected-button-keep-touch-target: false;\n  --mdc-outlined-button-keep-touch-target: false;\n  --mdc-outlined-button-outline-width: 1px;\n  --mdc-outlined-button-container-shape: 4px;\n  --mat-text-button-horizontal-padding: 8px;\n  --mat-text-button-with-icon-horizontal-padding: 8px;\n  --mat-text-button-icon-spacing: 8px;\n  --mat-text-button-icon-offset: 0;\n  --mat-filled-button-horizontal-padding: 16px;\n  --mat-filled-button-icon-spacing: 8px;\n  --mat-filled-button-icon-offset: -4px;\n  --mat-protected-button-horizontal-padding: 16px;\n  --mat-protected-button-icon-spacing: 8px;\n  --mat-protected-button-icon-offset: -4px;\n  --mat-outlined-button-horizontal-padding: 15px;\n  --mat-outlined-button-icon-spacing: 8px;\n  --mat-outlined-button-icon-offset: -4px;\n}\n\nhtml {\n  --mdc-text-button-label-text-color: #000;\n  --mdc-text-button-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mat-text-button-state-layer-color: #000;\n  --mat-text-button-disabled-state-layer-color: #000;\n  --mat-text-button-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-text-button-hover-state-layer-opacity: 0.04;\n  --mat-text-button-focus-state-layer-opacity: 0.12;\n  --mat-text-button-pressed-state-layer-opacity: 0.12;\n  --mdc-filled-button-container-color: white;\n  --mdc-filled-button-label-text-color: #000;\n  --mdc-filled-button-disabled-container-color: rgba(0, 0, 0, 0.12);\n  --mdc-filled-button-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mat-filled-button-state-layer-color: #000;\n  --mat-filled-button-disabled-state-layer-color: #000;\n  --mat-filled-button-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-filled-button-hover-state-layer-opacity: 0.04;\n  --mat-filled-button-focus-state-layer-opacity: 0.12;\n  --mat-filled-button-pressed-state-layer-opacity: 0.12;\n  --mdc-protected-button-container-color: white;\n  --mdc-protected-button-label-text-color: #000;\n  --mdc-protected-button-disabled-container-color: rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-protected-button-container-elevation-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-disabled-container-elevation-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-focus-container-elevation-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-hover-container-elevation-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-pressed-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-container-shadow-color: #000;\n  --mat-protected-button-state-layer-color: #000;\n  --mat-protected-button-disabled-state-layer-color: #000;\n  --mat-protected-button-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-protected-button-hover-state-layer-opacity: 0.04;\n  --mat-protected-button-focus-state-layer-opacity: 0.12;\n  --mat-protected-button-pressed-state-layer-opacity: 0.12;\n  --mdc-outlined-button-disabled-outline-color: rgba(0, 0, 0, 0.12);\n  --mdc-outlined-button-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-outlined-button-label-text-color: #000;\n  --mdc-outlined-button-outline-color: rgba(0, 0, 0, 0.12);\n  --mat-outlined-button-state-layer-color: #000;\n  --mat-outlined-button-disabled-state-layer-color: #000;\n  --mat-outlined-button-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-outlined-button-hover-state-layer-opacity: 0.04;\n  --mat-outlined-button-focus-state-layer-opacity: 0.12;\n  --mat-outlined-button-pressed-state-layer-opacity: 0.12;\n}\n\n.mat-mdc-button.mat-primary {\n  --mdc-text-button-label-text-color: #3f51b5;\n  --mat-text-button-state-layer-color: #3f51b5;\n  --mat-text-button-ripple-color: rgba(63, 81, 181, 0.1);\n}\n.mat-mdc-button.mat-accent {\n  --mdc-text-button-label-text-color: #ff4081;\n  --mat-text-button-state-layer-color: #ff4081;\n  --mat-text-button-ripple-color: rgba(255, 64, 129, 0.1);\n}\n.mat-mdc-button.mat-warn {\n  --mdc-text-button-label-text-color: #f44336;\n  --mat-text-button-state-layer-color: #f44336;\n  --mat-text-button-ripple-color: rgba(244, 67, 54, 0.1);\n}\n\n.mat-mdc-unelevated-button.mat-primary {\n  --mdc-filled-button-container-color: #3f51b5;\n  --mdc-filled-button-label-text-color: #fff;\n  --mat-filled-button-state-layer-color: #fff;\n  --mat-filled-button-ripple-color: rgba(255, 255, 255, 0.1);\n}\n.mat-mdc-unelevated-button.mat-accent {\n  --mdc-filled-button-container-color: #ff4081;\n  --mdc-filled-button-label-text-color: #fff;\n  --mat-filled-button-state-layer-color: #fff;\n  --mat-filled-button-ripple-color: rgba(255, 255, 255, 0.1);\n}\n.mat-mdc-unelevated-button.mat-warn {\n  --mdc-filled-button-container-color: #f44336;\n  --mdc-filled-button-label-text-color: #fff;\n  --mat-filled-button-state-layer-color: #fff;\n  --mat-filled-button-ripple-color: rgba(255, 255, 255, 0.1);\n}\n\n.mat-mdc-raised-button.mat-primary {\n  --mdc-protected-button-container-color: #3f51b5;\n  --mdc-protected-button-label-text-color: #fff;\n  --mat-protected-button-state-layer-color: #fff;\n  --mat-protected-button-ripple-color: rgba(255, 255, 255, 0.1);\n}\n.mat-mdc-raised-button.mat-accent {\n  --mdc-protected-button-container-color: #ff4081;\n  --mdc-protected-button-label-text-color: #fff;\n  --mat-protected-button-state-layer-color: #fff;\n  --mat-protected-button-ripple-color: rgba(255, 255, 255, 0.1);\n}\n.mat-mdc-raised-button.mat-warn {\n  --mdc-protected-button-container-color: #f44336;\n  --mdc-protected-button-label-text-color: #fff;\n  --mat-protected-button-state-layer-color: #fff;\n  --mat-protected-button-ripple-color: rgba(255, 255, 255, 0.1);\n}\n\n.mat-mdc-outlined-button.mat-primary {\n  --mdc-outlined-button-label-text-color: #3f51b5;\n  --mdc-outlined-button-outline-color: rgba(0, 0, 0, 0.12);\n  --mat-outlined-button-state-layer-color: #3f51b5;\n  --mat-outlined-button-ripple-color: rgba(63, 81, 181, 0.1);\n}\n.mat-mdc-outlined-button.mat-accent {\n  --mdc-outlined-button-label-text-color: #ff4081;\n  --mdc-outlined-button-outline-color: rgba(0, 0, 0, 0.12);\n  --mat-outlined-button-state-layer-color: #ff4081;\n  --mat-outlined-button-ripple-color: rgba(255, 64, 129, 0.1);\n}\n.mat-mdc-outlined-button.mat-warn {\n  --mdc-outlined-button-label-text-color: #f44336;\n  --mdc-outlined-button-outline-color: rgba(0, 0, 0, 0.12);\n  --mat-outlined-button-state-layer-color: #f44336;\n  --mat-outlined-button-ripple-color: rgba(244, 67, 54, 0.1);\n}\n\nhtml {\n  --mdc-text-button-container-height: 36px;\n  --mdc-filled-button-container-height: 36px;\n  --mdc-outlined-button-container-height: 36px;\n  --mdc-protected-button-container-height: 36px;\n  --mat-text-button-touch-target-display: block;\n  --mat-filled-button-touch-target-display: block;\n  --mat-protected-button-touch-target-display: block;\n  --mat-outlined-button-touch-target-display: block;\n}\n\nhtml {\n  --mdc-text-button-label-text-font: Roboto, sans-serif;\n  --mdc-text-button-label-text-size: 14px;\n  --mdc-text-button-label-text-tracking: 0.0892857143em;\n  --mdc-text-button-label-text-weight: 500;\n  --mdc-text-button-label-text-transform: none;\n  --mdc-filled-button-label-text-font: Roboto, sans-serif;\n  --mdc-filled-button-label-text-size: 14px;\n  --mdc-filled-button-label-text-tracking: 0.0892857143em;\n  --mdc-filled-button-label-text-weight: 500;\n  --mdc-filled-button-label-text-transform: none;\n  --mdc-outlined-button-label-text-font: Roboto, sans-serif;\n  --mdc-outlined-button-label-text-size: 14px;\n  --mdc-outlined-button-label-text-tracking: 0.0892857143em;\n  --mdc-outlined-button-label-text-weight: 500;\n  --mdc-outlined-button-label-text-transform: none;\n  --mdc-protected-button-label-text-font: Roboto, sans-serif;\n  --mdc-protected-button-label-text-size: 14px;\n  --mdc-protected-button-label-text-tracking: 0.0892857143em;\n  --mdc-protected-button-label-text-weight: 500;\n  --mdc-protected-button-label-text-transform: none;\n}\n\nhtml {\n  --mdc-icon-button-icon-size: 24px;\n}\n\nhtml {\n  --mdc-icon-button-icon-color: inherit;\n  --mdc-icon-button-disabled-icon-color: rgba(0, 0, 0, 0.38);\n  --mat-icon-button-state-layer-color: #000;\n  --mat-icon-button-disabled-state-layer-color: #000;\n  --mat-icon-button-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-icon-button-hover-state-layer-opacity: 0.04;\n  --mat-icon-button-focus-state-layer-opacity: 0.12;\n  --mat-icon-button-pressed-state-layer-opacity: 0.12;\n}\nhtml .mat-mdc-icon-button.mat-primary {\n  --mdc-icon-button-icon-color: #3f51b5;\n  --mat-icon-button-state-layer-color: #3f51b5;\n  --mat-icon-button-ripple-color: rgba(63, 81, 181, 0.1);\n}\nhtml .mat-mdc-icon-button.mat-accent {\n  --mdc-icon-button-icon-color: #ff4081;\n  --mat-icon-button-state-layer-color: #ff4081;\n  --mat-icon-button-ripple-color: rgba(255, 64, 129, 0.1);\n}\nhtml .mat-mdc-icon-button.mat-warn {\n  --mdc-icon-button-icon-color: #f44336;\n  --mat-icon-button-state-layer-color: #f44336;\n  --mat-icon-button-ripple-color: rgba(244, 67, 54, 0.1);\n}\n\nhtml {\n  --mat-icon-button-touch-target-display: block;\n}\n\n.mat-mdc-icon-button.mat-mdc-button-base {\n  --mdc-icon-button-state-layer-size: 48px;\n  width: var(--mdc-icon-button-state-layer-size);\n  height: var(--mdc-icon-button-state-layer-size);\n  padding: 12px;\n}\n\nhtml {\n  --mdc-fab-container-shape: 50%;\n  --mdc-fab-icon-size: 24px;\n  --mdc-fab-small-container-shape: 50%;\n  --mdc-fab-small-icon-size: 24px;\n  --mdc-extended-fab-container-height: 48px;\n  --mdc-extended-fab-container-shape: 24px;\n}\n\nhtml {\n  --mdc-fab-container-color: white;\n  --mdc-fab-container-elevation-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n  --mdc-fab-focus-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-fab-hover-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-fab-pressed-container-elevation-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);\n  --mdc-fab-container-shadow-color: #000;\n  --mat-fab-foreground-color: black;\n  --mat-fab-state-layer-color: #000;\n  --mat-fab-disabled-state-layer-color: #000;\n  --mat-fab-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-fab-hover-state-layer-opacity: 0.04;\n  --mat-fab-focus-state-layer-opacity: 0.12;\n  --mat-fab-pressed-state-layer-opacity: 0.12;\n  --mat-fab-disabled-state-container-color: rgba(0, 0, 0, 0.12);\n  --mat-fab-disabled-state-foreground-color: rgba(0, 0, 0, 0.38);\n  --mdc-fab-small-container-color: white;\n  --mdc-fab-small-container-elevation-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n  --mdc-fab-small-focus-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-fab-small-hover-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-fab-small-pressed-container-elevation-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);\n  --mdc-fab-small-container-shadow-color: #000;\n  --mat-fab-small-foreground-color: black;\n  --mat-fab-small-state-layer-color: #000;\n  --mat-fab-small-disabled-state-layer-color: #000;\n  --mat-fab-small-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-fab-small-hover-state-layer-opacity: 0.04;\n  --mat-fab-small-focus-state-layer-opacity: 0.12;\n  --mat-fab-small-pressed-state-layer-opacity: 0.12;\n  --mat-fab-small-disabled-state-container-color: rgba(0, 0, 0, 0.12);\n  --mat-fab-small-disabled-state-foreground-color: rgba(0, 0, 0, 0.38);\n  --mdc-extended-fab-container-elevation-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n  --mdc-extended-fab-focus-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-extended-fab-hover-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-extended-fab-pressed-container-elevation-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);\n  --mdc-extended-fab-container-shadow-color: #000;\n}\nhtml .mat-mdc-fab.mat-primary {\n  --mdc-fab-container-color: #3f51b5;\n  --mat-fab-foreground-color: #fff;\n  --mat-fab-state-layer-color: #fff;\n  --mat-fab-ripple-color: rgba(255, 255, 255, 0.1);\n}\nhtml .mat-mdc-fab.mat-accent {\n  --mdc-fab-container-color: #ff4081;\n  --mat-fab-foreground-color: #fff;\n  --mat-fab-state-layer-color: #fff;\n  --mat-fab-ripple-color: rgba(255, 255, 255, 0.1);\n}\nhtml .mat-mdc-fab.mat-warn {\n  --mdc-fab-container-color: #f44336;\n  --mat-fab-foreground-color: #fff;\n  --mat-fab-state-layer-color: #fff;\n  --mat-fab-ripple-color: rgba(255, 255, 255, 0.1);\n}\nhtml .mat-mdc-mini-fab.mat-primary {\n  --mdc-fab-small-container-color: #3f51b5;\n  --mat-fab-small-foreground-color: #fff;\n  --mat-fab-small-state-layer-color: #fff;\n  --mat-fab-small-ripple-color: rgba(255, 255, 255, 0.1);\n}\nhtml .mat-mdc-mini-fab.mat-accent {\n  --mdc-fab-small-container-color: #ff4081;\n  --mat-fab-small-foreground-color: #fff;\n  --mat-fab-small-state-layer-color: #fff;\n  --mat-fab-small-ripple-color: rgba(255, 255, 255, 0.1);\n}\nhtml .mat-mdc-mini-fab.mat-warn {\n  --mdc-fab-small-container-color: #f44336;\n  --mat-fab-small-foreground-color: #fff;\n  --mat-fab-small-state-layer-color: #fff;\n  --mat-fab-small-ripple-color: rgba(255, 255, 255, 0.1);\n}\n\nhtml {\n  --mat-fab-touch-target-display: block;\n  --mat-fab-small-touch-target-display: block;\n}\n\nhtml {\n  --mdc-extended-fab-label-text-font: Roboto, sans-serif;\n  --mdc-extended-fab-label-text-size: 14px;\n  --mdc-extended-fab-label-text-tracking: 0.0892857143em;\n  --mdc-extended-fab-label-text-weight: 500;\n}\n\nhtml {\n  --mdc-snackbar-container-shape: 4px;\n}\n\nhtml {\n  --mdc-snackbar-container-color: #333333;\n  --mdc-snackbar-supporting-text-color: rgba(255, 255, 255, 0.87);\n  --mat-snack-bar-button-color: #ff4081;\n}\n\nhtml {\n  --mdc-snackbar-supporting-text-font: Roboto, sans-serif;\n  --mdc-snackbar-supporting-text-line-height: 20px;\n  --mdc-snackbar-supporting-text-size: 14px;\n  --mdc-snackbar-supporting-text-weight: 400;\n}\n\nhtml {\n  --mat-table-row-item-outline-width: 1px;\n}\n\nhtml {\n  --mat-table-background-color: white;\n  --mat-table-header-headline-color: rgba(0, 0, 0, 0.87);\n  --mat-table-row-item-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-table-row-item-outline-color: rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-table-header-container-height: 56px;\n  --mat-table-footer-container-height: 52px;\n  --mat-table-row-item-container-height: 52px;\n}\n\nhtml {\n  --mat-table-header-headline-font: Roboto, sans-serif;\n  --mat-table-header-headline-line-height: 22px;\n  --mat-table-header-headline-size: 14px;\n  --mat-table-header-headline-weight: 500;\n  --mat-table-header-headline-tracking: 0.0071428571em;\n  --mat-table-row-item-label-text-font: Roboto, sans-serif;\n  --mat-table-row-item-label-text-line-height: 20px;\n  --mat-table-row-item-label-text-size: 14px;\n  --mat-table-row-item-label-text-weight: 400;\n  --mat-table-row-item-label-text-tracking: 0.0178571429em;\n  --mat-table-footer-supporting-text-font: Roboto, sans-serif;\n  --mat-table-footer-supporting-text-line-height: 20px;\n  --mat-table-footer-supporting-text-size: 14px;\n  --mat-table-footer-supporting-text-weight: 400;\n  --mat-table-footer-supporting-text-tracking: 0.0178571429em;\n}\n\nhtml {\n  --mdc-circular-progress-active-indicator-width: 4px;\n  --mdc-circular-progress-size: 48px;\n}\n\nhtml {\n  --mdc-circular-progress-active-indicator-color: #3f51b5;\n}\nhtml .mat-accent {\n  --mdc-circular-progress-active-indicator-color: #ff4081;\n}\nhtml .mat-warn {\n  --mdc-circular-progress-active-indicator-color: #f44336;\n}\n\nhtml {\n  --mat-badge-container-shape: 50%;\n  --mat-badge-container-size: unset;\n  --mat-badge-small-size-container-size: unset;\n  --mat-badge-large-size-container-size: unset;\n  --mat-badge-legacy-container-size: 22px;\n  --mat-badge-legacy-small-size-container-size: 16px;\n  --mat-badge-legacy-large-size-container-size: 28px;\n  --mat-badge-container-offset: -11px 0;\n  --mat-badge-small-size-container-offset: -8px 0;\n  --mat-badge-large-size-container-offset: -14px 0;\n  --mat-badge-container-overlap-offset: -11px;\n  --mat-badge-small-size-container-overlap-offset: -8px;\n  --mat-badge-large-size-container-overlap-offset: -14px;\n  --mat-badge-container-padding: 0;\n  --mat-badge-small-size-container-padding: 0;\n  --mat-badge-large-size-container-padding: 0;\n}\n\nhtml {\n  --mat-badge-background-color: #3f51b5;\n  --mat-badge-text-color: white;\n  --mat-badge-disabled-state-background-color: #b9b9b9;\n  --mat-badge-disabled-state-text-color: rgba(0, 0, 0, 0.38);\n}\n\n.mat-badge-accent {\n  --mat-badge-background-color: #ff4081;\n  --mat-badge-text-color: white;\n}\n\n.mat-badge-warn {\n  --mat-badge-background-color: #f44336;\n  --mat-badge-text-color: white;\n}\n\nhtml {\n  --mat-badge-text-font: Roboto, sans-serif;\n  --mat-badge-text-size: 12px;\n  --mat-badge-text-weight: 600;\n  --mat-badge-small-size-text-size: 9px;\n  --mat-badge-large-size-text-size: 24px;\n}\n\nhtml {\n  --mat-bottom-sheet-container-shape: 4px;\n}\n\nhtml {\n  --mat-bottom-sheet-container-text-color: rgba(0, 0, 0, 0.87);\n  --mat-bottom-sheet-container-background-color: white;\n}\n\nhtml {\n  --mat-bottom-sheet-container-text-font: Roboto, sans-serif;\n  --mat-bottom-sheet-container-text-line-height: 20px;\n  --mat-bottom-sheet-container-text-size: 14px;\n  --mat-bottom-sheet-container-text-tracking: 0.0178571429em;\n  --mat-bottom-sheet-container-text-weight: 400;\n}\n\nhtml {\n  --mat-legacy-button-toggle-height: 36px;\n  --mat-legacy-button-toggle-shape: 2px;\n  --mat-legacy-button-toggle-focus-state-layer-opacity: 1;\n  --mat-standard-button-toggle-shape: 4px;\n  --mat-standard-button-toggle-hover-state-layer-opacity: 0.04;\n  --mat-standard-button-toggle-focus-state-layer-opacity: 0.12;\n}\n\nhtml {\n  --mat-legacy-button-toggle-text-color: rgba(0, 0, 0, 0.38);\n  --mat-legacy-button-toggle-state-layer-color: rgba(0, 0, 0, 0.12);\n  --mat-legacy-button-toggle-selected-state-text-color: rgba(0, 0, 0, 0.54);\n  --mat-legacy-button-toggle-selected-state-background-color: #e0e0e0;\n  --mat-legacy-button-toggle-disabled-state-text-color: rgba(0, 0, 0, 0.26);\n  --mat-legacy-button-toggle-disabled-state-background-color: #eeeeee;\n  --mat-legacy-button-toggle-disabled-selected-state-background-color: #bdbdbd;\n  --mat-standard-button-toggle-text-color: rgba(0, 0, 0, 0.87);\n  --mat-standard-button-toggle-background-color: white;\n  --mat-standard-button-toggle-state-layer-color: black;\n  --mat-standard-button-toggle-selected-state-background-color: #e0e0e0;\n  --mat-standard-button-toggle-selected-state-text-color: rgba(0, 0, 0, 0.87);\n  --mat-standard-button-toggle-disabled-state-text-color: rgba(0, 0, 0, 0.26);\n  --mat-standard-button-toggle-disabled-state-background-color: white;\n  --mat-standard-button-toggle-disabled-selected-state-text-color: rgba(0, 0, 0, 0.87);\n  --mat-standard-button-toggle-disabled-selected-state-background-color: #bdbdbd;\n  --mat-standard-button-toggle-divider-color: #e0e0e0;\n}\n\nhtml {\n  --mat-standard-button-toggle-height: 48px;\n}\n\nhtml {\n  --mat-legacy-button-toggle-label-text-font: Roboto, sans-serif;\n  --mat-legacy-button-toggle-label-text-line-height: 24px;\n  --mat-legacy-button-toggle-label-text-size: 16px;\n  --mat-legacy-button-toggle-label-text-tracking: 0.03125em;\n  --mat-legacy-button-toggle-label-text-weight: 400;\n  --mat-standard-button-toggle-label-text-font: Roboto, sans-serif;\n  --mat-standard-button-toggle-label-text-line-height: 24px;\n  --mat-standard-button-toggle-label-text-size: 16px;\n  --mat-standard-button-toggle-label-text-tracking: 0.03125em;\n  --mat-standard-button-toggle-label-text-weight: 400;\n}\n\nhtml {\n  --mat-datepicker-calendar-container-shape: 4px;\n  --mat-datepicker-calendar-container-touch-shape: 4px;\n  --mat-datepicker-calendar-container-elevation-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  --mat-datepicker-calendar-container-touch-elevation-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-datepicker-calendar-date-selected-state-text-color: white;\n  --mat-datepicker-calendar-date-selected-state-background-color: #3f51b5;\n  --mat-datepicker-calendar-date-selected-disabled-state-background-color: rgba(63, 81, 181, 0.4);\n  --mat-datepicker-calendar-date-today-selected-state-outline-color: white;\n  --mat-datepicker-calendar-date-focus-state-background-color: rgba(63, 81, 181, 0.3);\n  --mat-datepicker-calendar-date-hover-state-background-color: rgba(63, 81, 181, 0.3);\n  --mat-datepicker-toggle-active-state-icon-color: #3f51b5;\n  --mat-datepicker-calendar-date-in-range-state-background-color: rgba(63, 81, 181, 0.2);\n  --mat-datepicker-calendar-date-in-comparison-range-state-background-color: rgba(249, 171, 0, 0.2);\n  --mat-datepicker-calendar-date-in-overlap-range-state-background-color: #a8dab5;\n  --mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color: #46a35e;\n  --mat-datepicker-toggle-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-datepicker-calendar-body-label-text-color: rgba(0, 0, 0, 0.54);\n  --mat-datepicker-calendar-period-button-text-color: #000;\n  --mat-datepicker-calendar-period-button-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-datepicker-calendar-navigation-button-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-datepicker-calendar-header-divider-color: rgba(0, 0, 0, 0.12);\n  --mat-datepicker-calendar-header-text-color: rgba(0, 0, 0, 0.54);\n  --mat-datepicker-calendar-date-today-outline-color: rgba(0, 0, 0, 0.38);\n  --mat-datepicker-calendar-date-today-disabled-state-outline-color: rgba(0, 0, 0, 0.18);\n  --mat-datepicker-calendar-date-text-color: rgba(0, 0, 0, 0.87);\n  --mat-datepicker-calendar-date-outline-color: transparent;\n  --mat-datepicker-calendar-date-disabled-state-text-color: rgba(0, 0, 0, 0.38);\n  --mat-datepicker-calendar-date-preview-state-outline-color: rgba(0, 0, 0, 0.24);\n  --mat-datepicker-range-input-separator-color: rgba(0, 0, 0, 0.87);\n  --mat-datepicker-range-input-disabled-state-separator-color: rgba(0, 0, 0, 0.38);\n  --mat-datepicker-range-input-disabled-state-text-color: rgba(0, 0, 0, 0.38);\n  --mat-datepicker-calendar-container-background-color: white;\n  --mat-datepicker-calendar-container-text-color: rgba(0, 0, 0, 0.87);\n}\n\n.mat-datepicker-content.mat-accent {\n  --mat-datepicker-calendar-date-selected-state-text-color: white;\n  --mat-datepicker-calendar-date-selected-state-background-color: #ff4081;\n  --mat-datepicker-calendar-date-selected-disabled-state-background-color: rgba(255, 64, 129, 0.4);\n  --mat-datepicker-calendar-date-today-selected-state-outline-color: white;\n  --mat-datepicker-calendar-date-focus-state-background-color: rgba(255, 64, 129, 0.3);\n  --mat-datepicker-calendar-date-hover-state-background-color: rgba(255, 64, 129, 0.3);\n  --mat-datepicker-calendar-date-in-range-state-background-color: rgba(255, 64, 129, 0.2);\n  --mat-datepicker-calendar-date-in-comparison-range-state-background-color: rgba(249, 171, 0, 0.2);\n  --mat-datepicker-calendar-date-in-overlap-range-state-background-color: #a8dab5;\n  --mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color: #46a35e;\n}\n.mat-datepicker-content.mat-warn {\n  --mat-datepicker-calendar-date-selected-state-text-color: white;\n  --mat-datepicker-calendar-date-selected-state-background-color: #f44336;\n  --mat-datepicker-calendar-date-selected-disabled-state-background-color: rgba(244, 67, 54, 0.4);\n  --mat-datepicker-calendar-date-today-selected-state-outline-color: white;\n  --mat-datepicker-calendar-date-focus-state-background-color: rgba(244, 67, 54, 0.3);\n  --mat-datepicker-calendar-date-hover-state-background-color: rgba(244, 67, 54, 0.3);\n  --mat-datepicker-calendar-date-in-range-state-background-color: rgba(244, 67, 54, 0.2);\n  --mat-datepicker-calendar-date-in-comparison-range-state-background-color: rgba(249, 171, 0, 0.2);\n  --mat-datepicker-calendar-date-in-overlap-range-state-background-color: #a8dab5;\n  --mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color: #46a35e;\n}\n\n.mat-datepicker-toggle-active.mat-accent {\n  --mat-datepicker-toggle-active-state-icon-color: #ff4081;\n}\n.mat-datepicker-toggle-active.mat-warn {\n  --mat-datepicker-toggle-active-state-icon-color: #f44336;\n}\n\n.mat-calendar-controls {\n  --mat-icon-button-touch-target-display: none;\n}\n.mat-calendar-controls .mat-mdc-icon-button.mat-mdc-button-base {\n  --mdc-icon-button-state-layer-size: 40px;\n  width: var(--mdc-icon-button-state-layer-size);\n  height: var(--mdc-icon-button-state-layer-size);\n  padding: 8px;\n}\n\nhtml {\n  --mat-datepicker-calendar-text-font: Roboto, sans-serif;\n  --mat-datepicker-calendar-text-size: 13px;\n  --mat-datepicker-calendar-body-label-text-size: 14px;\n  --mat-datepicker-calendar-body-label-text-weight: 500;\n  --mat-datepicker-calendar-period-button-text-size: 14px;\n  --mat-datepicker-calendar-period-button-text-weight: 500;\n  --mat-datepicker-calendar-header-text-size: 11px;\n  --mat-datepicker-calendar-header-text-weight: 400;\n}\n\nhtml {\n  --mat-divider-width: 1px;\n}\n\nhtml {\n  --mat-divider-color: rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-expansion-container-shape: 4px;\n  --mat-expansion-legacy-header-indicator-display: inline-block;\n  --mat-expansion-header-indicator-display: none;\n}\n\nhtml {\n  --mat-expansion-container-background-color: white;\n  --mat-expansion-container-text-color: rgba(0, 0, 0, 0.87);\n  --mat-expansion-actions-divider-color: rgba(0, 0, 0, 0.12);\n  --mat-expansion-header-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-expansion-header-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-expansion-header-disabled-state-text-color: rgba(0, 0, 0, 0.26);\n  --mat-expansion-header-text-color: rgba(0, 0, 0, 0.87);\n  --mat-expansion-header-description-color: rgba(0, 0, 0, 0.54);\n  --mat-expansion-header-indicator-color: rgba(0, 0, 0, 0.54);\n}\n\nhtml {\n  --mat-expansion-header-collapsed-state-height: 48px;\n  --mat-expansion-header-expanded-state-height: 64px;\n}\n\nhtml {\n  --mat-expansion-header-text-font: Roboto, sans-serif;\n  --mat-expansion-header-text-size: 14px;\n  --mat-expansion-header-text-weight: 500;\n  --mat-expansion-header-text-line-height: inherit;\n  --mat-expansion-header-text-tracking: inherit;\n  --mat-expansion-container-text-font: Roboto, sans-serif;\n  --mat-expansion-container-text-line-height: 20px;\n  --mat-expansion-container-text-size: 14px;\n  --mat-expansion-container-text-tracking: 0.0178571429em;\n  --mat-expansion-container-text-weight: 400;\n}\n\nhtml {\n  --mat-grid-list-tile-header-primary-text-size: 14px;\n  --mat-grid-list-tile-header-secondary-text-size: 12px;\n  --mat-grid-list-tile-footer-primary-text-size: 14px;\n  --mat-grid-list-tile-footer-secondary-text-size: 12px;\n}\n\nhtml {\n  --mat-icon-color: inherit;\n}\n\n.mat-icon.mat-primary {\n  --mat-icon-color: #3f51b5;\n}\n.mat-icon.mat-accent {\n  --mat-icon-color: #ff4081;\n}\n.mat-icon.mat-warn {\n  --mat-icon-color: #f44336;\n}\n\nhtml {\n  --mat-sidenav-container-shape: 0;\n  --mat-sidenav-container-elevation-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);\n  --mat-sidenav-container-width: auto;\n}\n\nhtml {\n  --mat-sidenav-container-divider-color: rgba(0, 0, 0, 0.12);\n  --mat-sidenav-container-background-color: white;\n  --mat-sidenav-container-text-color: rgba(0, 0, 0, 0.87);\n  --mat-sidenav-content-background-color: #fafafa;\n  --mat-sidenav-content-text-color: rgba(0, 0, 0, 0.87);\n  --mat-sidenav-scrim-color: rgba(0, 0, 0, 0.6);\n}\n\nhtml {\n  --mat-stepper-header-icon-foreground-color: white;\n  --mat-stepper-header-selected-state-icon-background-color: #3f51b5;\n  --mat-stepper-header-selected-state-icon-foreground-color: white;\n  --mat-stepper-header-done-state-icon-background-color: #3f51b5;\n  --mat-stepper-header-done-state-icon-foreground-color: white;\n  --mat-stepper-header-edit-state-icon-background-color: #3f51b5;\n  --mat-stepper-header-edit-state-icon-foreground-color: white;\n  --mat-stepper-container-color: white;\n  --mat-stepper-line-color: rgba(0, 0, 0, 0.12);\n  --mat-stepper-header-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-stepper-header-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-stepper-header-label-text-color: rgba(0, 0, 0, 0.54);\n  --mat-stepper-header-optional-label-text-color: rgba(0, 0, 0, 0.54);\n  --mat-stepper-header-selected-state-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-stepper-header-error-state-label-text-color: #f44336;\n  --mat-stepper-header-icon-background-color: rgba(0, 0, 0, 0.54);\n  --mat-stepper-header-error-state-icon-foreground-color: #f44336;\n  --mat-stepper-header-error-state-icon-background-color: transparent;\n}\nhtml .mat-step-header.mat-accent {\n  --mat-stepper-header-icon-foreground-color: white;\n  --mat-stepper-header-selected-state-icon-background-color: #ff4081;\n  --mat-stepper-header-selected-state-icon-foreground-color: white;\n  --mat-stepper-header-done-state-icon-background-color: #ff4081;\n  --mat-stepper-header-done-state-icon-foreground-color: white;\n  --mat-stepper-header-edit-state-icon-background-color: #ff4081;\n  --mat-stepper-header-edit-state-icon-foreground-color: white;\n}\nhtml .mat-step-header.mat-warn {\n  --mat-stepper-header-icon-foreground-color: white;\n  --mat-stepper-header-selected-state-icon-background-color: #f44336;\n  --mat-stepper-header-selected-state-icon-foreground-color: white;\n  --mat-stepper-header-done-state-icon-background-color: #f44336;\n  --mat-stepper-header-done-state-icon-foreground-color: white;\n  --mat-stepper-header-edit-state-icon-background-color: #f44336;\n  --mat-stepper-header-edit-state-icon-foreground-color: white;\n}\n\nhtml {\n  --mat-stepper-header-height: 72px;\n}\n\nhtml {\n  --mat-stepper-container-text-font: Roboto, sans-serif;\n  --mat-stepper-header-label-text-font: Roboto, sans-serif;\n  --mat-stepper-header-label-text-size: 14px;\n  --mat-stepper-header-label-text-weight: 400;\n  --mat-stepper-header-error-state-label-text-size: 16px;\n  --mat-stepper-header-selected-state-label-text-size: 16px;\n  --mat-stepper-header-selected-state-label-text-weight: 400;\n}\n\nhtml {\n  --mat-sort-arrow-color: #757575;\n}\n\nhtml {\n  --mat-toolbar-container-background-color: whitesmoke;\n  --mat-toolbar-container-text-color: rgba(0, 0, 0, 0.87);\n}\n\n.mat-toolbar.mat-primary {\n  --mat-toolbar-container-background-color: #3f51b5;\n  --mat-toolbar-container-text-color: white;\n}\n.mat-toolbar.mat-accent {\n  --mat-toolbar-container-background-color: #ff4081;\n  --mat-toolbar-container-text-color: white;\n}\n.mat-toolbar.mat-warn {\n  --mat-toolbar-container-background-color: #f44336;\n  --mat-toolbar-container-text-color: white;\n}\n\nhtml {\n  --mat-toolbar-standard-height: 64px;\n  --mat-toolbar-mobile-height: 56px;\n}\n\nhtml {\n  --mat-toolbar-title-text-font: Roboto, sans-serif;\n  --mat-toolbar-title-text-line-height: 32px;\n  --mat-toolbar-title-text-size: 20px;\n  --mat-toolbar-title-text-tracking: 0.0125em;\n  --mat-toolbar-title-text-weight: 500;\n}\n\nhtml {\n  --mat-tree-container-background-color: white;\n  --mat-tree-node-text-color: rgba(0, 0, 0, 0.87);\n}\n\nhtml {\n  --mat-tree-node-min-height: 48px;\n}\n\nhtml {\n  --mat-tree-node-text-font: Roboto, sans-serif;\n  --mat-tree-node-text-size: 14px;\n  --mat-tree-node-text-weight: 400;\n}\n\n.docs-app-background {\n  background: #fafafa;\n}\n\n.docs-primary-header {\n  background: #3f51b5;\n}\n.docs-primary-header h1 {\n  color: white;\n}\n\n.docs-footer {\n  background: #3f51b5;\n  color: white;\n}\n\n.docs-help-support {\n  color: rgba(0, 0, 0, 0.54);\n}\n.docs-help-support a {\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.is-next-version {\n  background: #b71c1c !important;\n}\n\n.docs-component-viewer-nav-content {\n  border-right: 1px solid rgba(0, 0, 0, 0.12);\n}\n.docs-component-viewer-nav-content h3 {\n  background: #3f51b5;\n  color: white;\n}\n.docs-component-viewer-nav-content::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.26);\n}\n.docs-component-viewer-nav-content a {\n  color: rgba(0, 0, 0, 0.54);\n}\n.docs-component-viewer-nav-content a:hover {\n  color: rgba(0, 0, 0, 0.87);\n}\n.docs-component-viewer-nav-content a.docs-component-viewer-sidenav-item-selected {\n  background: rgba(63, 81, 181, 0.15);\n}\n.docs-component-viewer-nav-content a.docs-component-viewer-sidenav-item-selected .mdc-list-item__primary-text {\n  color: #3f51b5;\n}\n.docs-component-viewer-nav-content a.docs-component-viewer-sidenav-item-selected:hover {\n  background: rgba(63, 81, 181, 0.3);\n}\n\napp-viewer {\n  color: rgba(0, 0, 0, 0.87);\n  /* TODO(mdc-migration): The following rule targets internal classes of tabs that may no longer apply for the MDC version. */\n}\napp-viewer .mat-tab-label:focus {\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.docs-component-viewer-tabbed-content,\n.docs-api-h3 {\n  border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n}\n\n@media (max-width: 959px) {\n  .docs-component-viewer-sidenav .docs-component-viewer-nav-content {\n    background: none;\n  }\n  .mat-drawer::-webkit-scrollbar-thumb {\n    background: rgba(0, 0, 0, 0.26);\n  }\n}\n.docs-api-method-name-cell {\n  color: #283593;\n}\n\n.docs-api-method-returns-type,\n.docs-api-method-parameter-type {\n  color: #303f9f;\n}\n\n.docs-api-modifier-method-marker {\n  background-color: #5c6bc0;\n  color: white;\n}\n\n.docs-api-h1 {\n  display: none !important;\n}\n\n.docs-api > p {\n  word-break: break-word;\n}\n\n.docs-api a {\n  color: #3f51b5;\n}\n\n.docs-api-class-name,\n.docs-api-module-import,\n.docs-api-class-selector-name,\n.docs-api-class-export-name {\n  background: rgba(0, 0, 0, 0.06);\n}\n\n.docs-markdown a:not(.mat-mdc-button-base) {\n  color: #3f51b5;\n}\n.docs-markdown pre {\n  background: rgba(0, 0, 0, 0.01);\n  border: 0.5px solid rgba(0, 0, 0, 0.2);\n}\n.docs-markdown pre code {\n  background: transparent;\n}\n.docs-markdown h3 .material-icons,\n.docs-markdown h4 .material-icons {\n  color: rgba(0, 0, 0, 0.54);\n}\n.docs-markdown code {\n  background: rgba(0, 0, 0, 0.03);\n}\n\n.docs-svg-primary-fill {\n  fill: #3f51b5;\n}\n\n.docs-svg-primary-stroke {\n  stroke: #3f51b5;\n}\n\n.docs-svg-primary-stop-color {\n  stop-color: #3f51b5;\n}\n\n.docs-svg-accent-fill {\n  fill: #ff4081;\n}\n\n.docs-svg-accent-stroke {\n  stroke: #ff4081;\n}\n\n.docs-svg-accent-stop-color {\n  stop-color: #ff4081;\n}\n\n.docs-svg-primary-dark-30-fill {\n  fill: #2c397f;\n}\n\n.docs-svg-primary-dark-30-stroke {\n  stroke: #2c397f;\n}\n\n.docs-svg-primary-dark-30-stop-color {\n  stop-color: #2c397f;\n}\n\n.docs-svg-primary-dark-40-fill {\n  fill: #26316d;\n}\n\n.docs-svg-primary-dark-40-stroke {\n  stroke: #26316d;\n}\n\n.docs-svg-primary-dark-40-stop-color {\n  stop-color: #26316d;\n}\n\n.docs-svg-primary-light-20-fill {\n  fill: #6171c8;\n}\n\n.docs-svg-primary-light-20-stroke {\n  stroke: #6171c8;\n}\n\n.docs-svg-primary-light-20-stop-color {\n  stop-color: #6171c8;\n}\n\n.docs-svg-primary-light-30-fill {\n  fill: #7583cf;\n}\n\n.docs-svg-primary-light-30-stroke {\n  stroke: #7583cf;\n}\n\n.docs-svg-primary-light-30-stop-color {\n  stop-color: #7583cf;\n}\n\n.docs-svg-primary-light-40-fill {\n  fill: #8994d6;\n}\n\n.docs-svg-primary-light-40-stroke {\n  stroke: #8994d6;\n}\n\n.docs-svg-primary-light-40-stop-color {\n  stop-color: #8994d6;\n}\n\n.docs-svg-primary-light-60-fill {\n  fill: #b0b8e4;\n}\n\n.docs-svg-primary-light-60-stroke {\n  stroke: #b0b8e4;\n}\n\n.docs-svg-primary-light-60-stop-color {\n  stop-color: #b0b8e4;\n}\n\n.docs-svg-primary-light-80-fill {\n  fill: #d8dbf1;\n}\n\n.docs-svg-primary-light-80-stroke {\n  stroke: #d8dbf1;\n}\n\n.docs-svg-primary-light-80-stop-color {\n  stop-color: #d8dbf1;\n}\n\n.docs-svg-primary-light-85-fill {\n  fill: #e1e4f5;\n}\n\n.docs-svg-primary-light-85-stroke {\n  stroke: #e1e4f5;\n}\n\n.docs-svg-primary-light-85-stop-color {\n  stop-color: #e1e4f5;\n}\n\n.docs-api table,\n.docs-markdown > table {\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.docs-api th,\n.docs-markdown > table th {\n  background: whitesmoke;\n}\n\n.docs-api td,\n.docs-api thead,\n.docs-markdown > table td,\n.docs-markdown > table thead {\n  border: 1px solid rgba(0, 0, 0, 0.12);\n}\n\napp-footer .docs-footer-links a {\n  color: white;\n}\n\napp-home .docs-header-background {\n  background: #3f51b5;\n}\napp-home .docs-header-headline {\n  color: white;\n}\napp-home .docs-header-start {\n  color: #3f51b5;\n}\napp-home .docs-header-start .docs-link {\n  color: white;\n}\napp-home .docs-homepage-row {\n  color: rgba(0, 0, 0, 0.54);\n}\napp-home .docs-homepage-carousel-row h2 {\n  color: rgba(0, 0, 0, 0.54);\n}\napp-home a.docs-link,\napp-home a.docs-featured-components-carousel-item {\n  color: rgba(0, 0, 0, 0.54);\n}\napp-home .docs-homepage-guides-card,\napp-home a.docs-link:hover {\n  color: rgba(0, 0, 0, 0.87);\n}\napp-home .docs-homepage-guides-card-divider {\n  background: #ff4081;\n}\napp-home [carousel-item]:hover .docs-homepage-guides-card {\n  background: rgba(0, 0, 0, 0.04);\n}\napp-home [carousel-item]:focus {\n  outline: none;\n}\napp-home [carousel-item]:focus .docs-homepage-guides-card {\n  background: rgba(0, 0, 0, 0.12);\n}\n\napp-not-found {\n  color: rgba(0, 0, 0, 0.87);\n}\napp-not-found .shield-left {\n  fill: #3f51b5;\n}\napp-not-found .shield-right {\n  fill: #32408f;\n}\napp-not-found .eye {\n  fill: #fafafa;\n}\napp-not-found .frown {\n  stroke: #fafafa;\n}\n\napp-navbar {\n  color: white;\n}\napp-navbar .docs-navbar, app-navbar .docs-navbar-header {\n  background: #3f51b5;\n}\napp-navbar .docs-navbar a:hover, app-navbar .docs-navbar a:focus, app-navbar .docs-navbar-header a:hover, app-navbar .docs-navbar-header a:focus {\n  background: rgba(0, 0, 0, 0.4);\n}\napp-navbar .docs-navbar .docs-navbar-header-item-selected, app-navbar .docs-navbar-header .docs-navbar-header-item-selected {\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.docs-toc-container {\n  border-left: solid 4px #3f51b5;\n}\n.docs-toc-container .docs-link {\n  color: rgba(0, 0, 0, 0.54);\n}\n.docs-toc-container .docs-link:hover, .docs-toc-container .docs-link.docs-active {\n  color: #3f51b5;\n}","@use '../tokens/m2/mat/option' as tokens-mat-option;\n@use '../tokens/token-utils';\n@use '../style/sass-utils';\n@use '../theming/theming';\n@use '../theming/inspection';\n@use '../theming/validation';\n@use '../typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-option.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected option: primary, secondary,\n///      tertiary, or error (If not specified, default secondary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme));\n    }\n\n    .mat-accent {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme, accent));\n    }\n\n    .mat-warn {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected option: primary, secondary,\n///      tertiary, or error (If not specified, default secondary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-option') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-option-tokens: token-utils.get-tokens-for($tokens, tokens-mat-option.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-option.$prefix, $mat-option-tokens);\n}\n","@use '../../theming/theming';\n@use '../../theming/inspection';\n@use '../../theming/validation';\n@use '../../style/sass-utils';\n@use '../../tokens/token-utils';\n@use '../../tokens/m2/mat/full-pseudo-checkbox' as tokens-mat-full-pseudo-checkbox;\n@use '../../tokens/m2/mat/minimal-pseudo-checkbox' as tokens-mat-minimal-pseudo-checkbox;\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-full-pseudo-checkbox.$prefix,\n      tokens-mat-full-pseudo-checkbox.get-color-tokens($theme, $palette-name));\n    @include token-utils.create-token-values(tokens-mat-minimal-pseudo-checkbox.$prefix,\n      tokens-mat-minimal-pseudo-checkbox.get-color-tokens($theme, $palette-name));\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-full-pseudo-checkbox-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-full-pseudo-checkbox.$prefix, $options...);\n  $mat-minimal-pseudo-checkbox-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-minimal-pseudo-checkbox.$prefix, $options...);\n  @include token-utils.create-token-values(\n      tokens-mat-full-pseudo-checkbox.$prefix, $mat-full-pseudo-checkbox-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-minimal-pseudo-checkbox.$prefix, $mat-minimal-pseudo-checkbox-tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {}\n\n/// Outputs color theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the pseudo-checkbox: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-primary {\n      @include _palette-styles($theme, primary);\n    }\n\n    // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n    // theme from their parent, rather than implementing their own theming, which is why we\n    // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n    // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n    // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n    @include _palette-styles($theme, accent);\n    .mat-accent {\n      @include _palette-styles($theme, accent);\n    }\n\n    .mat-warn {\n      @include _palette-styles($theme, warn);\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n}\n\n/// Outputs density theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the pseudo-checkbox: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n","@use './theming/theming';\n@use './theming/inspection';\n@use './theming/validation';\n@use './style/private';\n@use './ripple/ripple-theme';\n@use './option/option-theme';\n@use './option/optgroup-theme';\n@use './selection/pseudo-checkbox/pseudo-checkbox-theme';\n@use './style/elevation';\n@use './style/sass-utils';\n@use './typography/typography';\n@use './tokens/token-utils';\n@use './tokens/m2/mat/app' as tokens-mat-app;\n@use './tokens/m2/mat/ripple' as tokens-mat-ripple;\n@use './tokens/m2/mat/option' as tokens-mat-option;\n@use './tokens/m2/mat/full-pseudo-checkbox' as tokens-mat-full-pseudo-checkbox;\n@use './tokens/m2/mat/minimal-pseudo-checkbox' as tokens-mat-minimal-pseudo-checkbox;\n\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include ripple-theme.base($theme);\n    @include option-theme.base($theme);\n    @include optgroup-theme.base($theme);\n    @include pseudo-checkbox-theme.base($theme);\n  }\n}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include ripple-theme.color($theme);\n    @include option-theme.color($theme);\n    @include optgroup-theme.color($theme);\n    @include pseudo-checkbox-theme.color($theme);\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-app.$prefix,\n        tokens-mat-app.get-color-tokens($theme));\n    }\n\n    // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n    // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n    // elevated.\n    @for $zValue from 0 through 24 {\n      $selector: elevation.$prefix + $zValue;\n      // We need the `mat-mdc-elevation-specific`, because some MDC mixins\n      // come with elevation baked in and we don't have a way of removing it.\n      .#{$selector}, .mat-mdc-elevation-specific.#{$selector} {\n        @include private.private-theme-elevation($zValue, $theme);\n      }\n    }\n  }\n\n  // TODO(crisbeto): move this into the base.\n  // Marker that is used to determine whether the user has added a theme to their page.\n  @at-root {\n    .mat-theme-loaded-marker {\n      display: none;\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include option-theme.typography($theme);\n    @include optgroup-theme.typography($theme);\n    @include pseudo-checkbox-theme.typography($theme);\n    @include ripple-theme.typography($theme);\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include option-theme.density($theme);\n    @include optgroup-theme.density($theme);\n    @include pseudo-checkbox-theme.density($theme);\n    @include ripple-theme.density($theme);\n  }\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin theme($theme, $options...) {\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-app-tokens: token-utils.get-tokens-for($tokens, tokens-mat-app.$prefix, $options...);\n  $mat-ripple-tokens: token-utils.get-tokens-for($tokens, tokens-mat-ripple.$prefix, $options...);\n  $mat-option-tokens: token-utils.get-tokens-for($tokens, tokens-mat-option.$prefix, $options...);\n  $mat-full-pseudo-checkbox-tokens: token-utils.get-tokens-for($tokens,\n    tokens-mat-full-pseudo-checkbox.$prefix, $options...);\n  $mat-minimal-pseudo-checkbox-tokens: token-utils.get-tokens-for($tokens,\n    tokens-mat-minimal-pseudo-checkbox.$prefix, $options...);\n\n  @include token-utils.create-token-values(tokens-mat-app.$prefix, $mat-app-tokens);\n  @include token-utils.create-token-values(tokens-mat-ripple.$prefix, $mat-ripple-tokens);\n  @include token-utils.create-token-values(tokens-mat-option.$prefix, $mat-option-tokens);\n  @include token-utils.create-token-values(tokens-mat-full-pseudo-checkbox.$prefix,\n    $mat-full-pseudo-checkbox-tokens);\n  @include token-utils.create-token-values(tokens-mat-minimal-pseudo-checkbox.$prefix,\n    $mat-minimal-pseudo-checkbox-tokens);\n}\n","@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mdc/linear-progress' as tokens-mdc-linear-progress;\n@use '@material/linear-progress/linear-progress-theme' as mdc-linear-progress-theme;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-linear-progress-theme.theme(tokens-mdc-linear-progress.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include mdc-linear-progress-theme.theme(\n    tokens-mdc-linear-progress.get-color-tokens($theme, $palette-name));\n}\n\n/// Outputs color theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the progress bar: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-progress-bar {\n      @include _palette-styles($theme, primary);\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {}\n\n\n/// Outputs density theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the progress bar: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-linear-progress-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-linear-progress.$prefix, $options...);\n  @include mdc-linear-progress-theme.theme($mdc-linear-progress-tokens);\n}\n","@use '@material/textfield/filled-text-field-theme' as mdc-filled-text-field-theme;\n@use '@material/textfield/outlined-text-field-theme' as mdc-outlined-text-field-theme;\n@use '../core/tokens/m2/mdc/filled-text-field' as tokens-mdc-filled-text-field;\n@use '../core/tokens/m2/mdc/outlined-text-field' as tokens-mdc-outlined-text-field;\n@use '../core/tokens/m2/mat/form-field' as tokens-mat-form-field;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-form-field.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n          tokens-mdc-filled-text-field.$prefix,\n          tokens-mdc-filled-text-field.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mdc-outlined-text-field.$prefix,\n          tokens-mdc-outlined-text-field.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-form-field.$prefix,\n          tokens-mat-form-field.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the form field: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-filled-text-field-theme.theme(\n          tokens-mdc-filled-text-field.get-color-tokens($theme));\n      @include mdc-outlined-text-field-theme.theme(\n          tokens-mdc-outlined-text-field.get-color-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-color-tokens($theme));\n    }\n\n    .mat-mdc-form-field.mat-accent {\n      @include mdc-filled-text-field-theme.theme(\n          tokens-mdc-filled-text-field.private-get-color-palette-color-tokens($theme, accent));\n      @include mdc-outlined-text-field-theme.theme(\n          tokens-mdc-outlined-text-field.private-get-color-palette-color-tokens($theme, accent));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.private-get-color-palette-color-tokens($theme, accent));\n    }\n\n    .mat-mdc-form-field.mat-warn {\n      @include mdc-filled-text-field-theme.theme(\n          tokens-mdc-filled-text-field.private-get-color-palette-color-tokens($theme, warn));\n      @include mdc-outlined-text-field-theme.theme(\n          tokens-mdc-outlined-text-field.private-get-color-palette-color-tokens($theme, warn));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.private-get-color-palette-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-filled-text-field-theme.theme(\n          tokens-mdc-filled-text-field.get-typography-tokens($theme));\n      @include mdc-outlined-text-field-theme.theme(\n          tokens-mdc-outlined-text-field.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the form field: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-filled-text-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-filled-text-field.$prefix, $options...);\n  $mdc-outlined-text-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-outlined-text-field.$prefix, $options...);\n  $mat-form-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mat-form-field.$prefix, $options...);\n  @include mdc-filled-text-field-theme.theme($mdc-filled-text-field-tokens);\n  @include mdc-outlined-text-field-theme.theme($mdc-outlined-text-field-tokens);\n  @include token-utils.create-token-values(tokens-mat-form-field.$prefix, $mat-form-field-tokens);\n}\n","@use '../core/tokens/m2/mat/select' as tokens-mat-select;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-select.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      $mat-tokens: tokens-mat-select.get-unthemable-tokens();\n      @include token-utils.create-token-values(tokens-mat-select.$prefix, $mat-tokens);\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the select arrow: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-color-tokens($theme));\n\n      .mat-mdc-form-field.mat-accent {\n        @include token-utils.create-token-values(tokens-mat-select.$prefix,\n          tokens-mat-select.get-color-tokens($theme, accent));\n      }\n\n      .mat-mdc-form-field.mat-warn {\n        @include token-utils.create-token-values(tokens-mat-select.$prefix,\n          tokens-mat-select.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the select arrow: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-select') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-select-tokens: token-utils.get-tokens-for($tokens, tokens-mat-select.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-select.$prefix, $mat-select-tokens);\n}\n","@use 'sass:color';\n@use '@material/chips/chip-theme' as mdc-chip-theme;\n@use '../core/tokens/m2/mdc/chip' as tokens-mdc-chip;\n@use '../core/tokens/m2/mat/chip' as tokens-mat-chip;\n@use '../core/tokens/token-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-chips.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    .mat-mdc-standard-chip {\n      @include mdc-chip-theme.theme(tokens-mdc-chip.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-chip.$prefix, tokens-mat-chip.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected chip: primary, secondary, tertiary,\n///      or error (If not specified, default secondary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-standard-chip {\n      $default-color-tokens: tokens-mdc-chip.get-color-tokens($theme);\n      @include mdc-chip-theme.theme($default-color-tokens);\n      @include token-utils.create-token-values(\n          tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme));\n\n      &.mat-mdc-chip-selected,\n      &.mat-mdc-chip-highlighted {\n        &.mat-primary {\n          $primary-color-tokens: tokens-mdc-chip.get-color-tokens($theme, primary);\n          @include mdc-chip-theme.theme($primary-color-tokens);\n          @include token-utils.create-token-values(\n              tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, primary));\n        }\n\n        &.mat-accent {\n          $accent-color-tokens: tokens-mdc-chip.get-color-tokens($theme, accent);\n          @include mdc-chip-theme.theme($accent-color-tokens);\n          @include token-utils.create-token-values(\n              tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, accent));\n        }\n\n        &.mat-warn {\n          $warn-color-tokens: tokens-mdc-chip.get-color-tokens($theme, warn);\n          @include mdc-chip-theme.theme($warn-color-tokens);\n          @include token-utils.create-token-values(\n              tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, warn));\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    $typography-tokens: tokens-mdc-chip.get-typography-tokens($theme);\n\n    .mat-mdc-standard-chip {\n      @include mdc-chip-theme.theme($typography-tokens);\n      @include token-utils.create-token-values(\n          tokens-mat-chip.$prefix, tokens-mat-chip.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $density-tokens: tokens-mdc-chip.get-density-tokens($theme);\n\n    .mat-mdc-chip.mat-mdc-standard-chip {\n      @include mdc-chip-theme.theme($density-tokens);\n      @include token-utils.create-token-values(\n          tokens-mat-chip.$prefix, tokens-mat-chip.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected chip: primary, secondary, tertiary,\n///      or error (If not specified, default secondary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-chip-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-chip.$prefix, $options...);\n  $mat-chip-tokens: token-utils.get-tokens-for($tokens, tokens-mat-chip.$prefix, $options...);\n  @include mdc-chip-theme.theme($mdc-chip-tokens);\n  @include token-utils.create-token-values(tokens-mat-chip.$prefix, $mat-chip-tokens);\n}\n","@use '@material/switch/switch-theme' as mdc-switch-theme;\n@use '@material/form-field/form-field-theme' as mdc-form-field-theme;\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/form-field' as tokens-mdc-form-field;\n@use '../core/tokens/m2/mat/switch' as tokens-mat-switch;\n@use '../core/tokens/m2/mdc/switch' as tokens-mdc-switch;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      $mat-tokens: tokens-mat-switch.get-unthemable-tokens();\n      $mdc-tokens: tokens-mdc-switch.get-unthemable-tokens();\n      @include mdc-switch-theme.theme($mdc-tokens);\n      @include token-utils.create-token-values(tokens-mat-switch.$prefix, $mat-tokens);\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slide-toggle: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    $is-dark: inspection.get-theme-type($theme) == dark;\n    $mat-tokens: tokens-mat-switch.get-color-tokens($theme);\n    $mdc-tokens: tokens-mdc-switch.get-color-tokens($theme);\n\n    // Add values for MDC slide toggles tokens\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-switch-theme.theme($mdc-tokens);\n      @include token-utils.create-token-values(tokens-mat-switch.$prefix, $mat-tokens);\n\n      // TODO(wagnermaciel): Use our token system to define this css variable.\n    --mdc-switch-disabled-label-text-color: #{inspection.get-theme-color(\n      $theme,\n      foreground,\n      disabled-text\n    )};\n\n    .mat-mdc-slide-toggle {\n        @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-color-tokens($theme));\n\n        // Change the color palette related tokens to accent or warn if applicable\n        &.mat-accent {\n          @include mdc-switch-theme.theme(\n              tokens-mdc-switch.private-get-color-palette-color-tokens($theme, accent));\n        }\n\n        &.mat-warn {\n          @include mdc-switch-theme.theme(\n              tokens-mdc-switch.private-get-color-palette-color-tokens($theme, warn));\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    $mat-tokens: tokens-mat-switch.get-typography-tokens($theme);\n    $mdc-tokens: tokens-mdc-switch.get-typography-tokens($theme);\n\n    // Add values for MDC slide toggle tokens\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-switch-theme.theme($mdc-tokens);\n      @include token-utils.create-token-values(tokens-mat-switch.$prefix, $mat-tokens);\n\n      .mat-mdc-slide-toggle {\n        @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-typography-tokens($theme));\n      }\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      $mat-tokens: tokens-mat-switch.get-density-tokens($theme);\n      $mdc-tokens: tokens-mdc-switch.get-density-tokens($theme);\n      @include mdc-switch-theme.theme(tokens-mdc-switch.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slide-toggle: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  // Don't pass $options here, since the mdc-form-field doesn't support color options,\n  // only the mdc-switch does.\n  $mdc-form-field-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-form-field.$prefix);\n  $mat-switch-tokens: token-utils.get-tokens-for($tokens, tokens-mat-switch.$prefix);\n  $mdc-switch-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-switch.$prefix, $options...);\n\n  @include mdc-form-field-theme.theme($mdc-form-field-tokens);\n  @include mdc-switch-theme.theme($mdc-switch-tokens);\n  @include token-utils.create-token-values(tokens-mat-switch.$prefix, $mat-switch-tokens);\n}\n","@use '@material/radio/radio-theme' as mdc-radio-theme;\n@use '@material/form-field/form-field-theme' as mdc-form-field-theme;\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/form-field' as tokens-mdc-form-field;\n@use '../core/tokens/m2/mdc/radio' as tokens-mdc-radio;\n@use '../core/tokens/m2/mat/radio' as tokens-mat-radio;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-radio.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-radio.$prefix, tokens-mat-radio.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the radio button: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-radio-button {\n      @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-color-tokens($theme));\n\n      &.mat-primary {\n        @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme, primary));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme, primary));\n      }\n\n      &.mat-accent {\n        @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme));\n      }\n\n      &.mat-warn {\n        @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme, warn));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-typography-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-radio.$prefix, tokens-mat-radio.get-typography-tokens($theme));\n    }\n\n    .mat-mdc-radio-button {\n      @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $density-scale: inspection.get-theme-density($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-density-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-radio.$prefix, tokens-mat-radio.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the radio button: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-radio-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-radio.$prefix, $options...);\n  $mat-radio-tokens: token-utils.get-tokens-for($tokens, tokens-mat-radio.$prefix, $options...);\n  // Don't pass $options here, since the mdc-form-field doesn't support color options,\n  // only the mdc-radio and mat-radio do.\n  $mdc-form-field-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-form-field.$prefix);\n  @include mdc-radio-theme.theme($mdc-radio-tokens);\n  @include mdc-form-field-theme.theme($mdc-form-field-tokens);\n  @include token-utils.create-token-values(tokens-mat-radio.$prefix, $mat-radio-tokens);\n}\n","@use '@material/slider/slider-theme' as mdc-slider-theme;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mat/slider' as tokens-mat-slider;\n@use '../core/tokens/m2/mdc/slider' as tokens-mdc-slider;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-slider.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      $mat-tokens: tokens-mat-slider.get-unthemable-tokens();\n      @include token-utils.create-token-values(tokens-mat-slider.$prefix, $mat-tokens);\n      @include mdc-slider-theme.theme(tokens-mdc-slider.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slider: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    $is-dark: inspection.get-theme-type($theme) == dark;\n\n    $mdc-color-tokens: token-utils.resolve-elevation(\n        tokens-mdc-slider.get-color-tokens($theme),\n        handle-elevation,\n        handle-shadow-color\n    );\n\n    $mat-slider-color-tokens: tokens-mat-slider.get-color-tokens($theme);\n\n  // Add values for MDC slider tokens.\n  @include sass-utils.current-selector-or-root() {\n    @include mdc-slider-theme.theme($mdc-color-tokens);\n    @include token-utils.create-token-values(\n      tokens-mat-slider.$prefix,\n      $mat-slider-color-tokens\n    );\n\n    .mat-accent {\n      @include token-utils.create-token-values(\n        tokens-mat-slider.$prefix,\n        tokens-mat-slider.private-get-color-palette-color-tokens($theme, accent),\n      );\n      @include mdc-slider-theme.theme(\n        tokens-mdc-slider.private-get-color-palette-color-tokens($theme, accent));\n    }\n\n      .mat-warn {\n        @include token-utils.create-token-values(\n          tokens-mat-slider.$prefix,\n          tokens-mat-slider.private-get-color-palette-color-tokens($theme, warn),\n        );\n        @include mdc-slider-theme.theme(\n            tokens-mdc-slider.private-get-color-palette-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n\n/// Outputs typography theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    // Add values for MDC slider tokens.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-slider-theme.theme(tokens-mdc-slider.get-typography-tokens($theme));\n    }\n  }\n}\n\n\n/// Outputs density theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    // Add values for MDC slider tokens.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-slider-theme.theme(tokens-mdc-slider.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slider: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-slider-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-slider.$prefix, $options...);\n  $mat-slider-tokens: token-utils.get-tokens-for($tokens, tokens-mat-slider.$prefix, $options...);\n  @include mdc-slider-theme.theme($mdc-slider-tokens);\n  @include token-utils.create-token-values(tokens-mat-slider.$prefix, $mat-slider-tokens);\n}\n","@use 'sass:map';\n@use '@material/list/evolution-mixins';\n@use '@material/checkbox/checkbox-theme' as mdc-checkbox-theme;\n@use '@material/radio/radio-theme' as mdc-radio-theme;\n@use '@material/list/list-theme' as mdc-list-theme;\n\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mat/list' as tokens-mat-list;\n@use '../core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;\n@use '../core/tokens/m2/mdc/radio' as tokens-mdc-radio;\n@use '../core/tokens/m2/mdc/list' as tokens-mdc-list;\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n\n@mixin base($theme) {\n  // Add default values for tokens not related to color, typography, or density.\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-list-theme.theme(tokens-mdc-list.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    $mdc-list-color-tokens: tokens-mdc-list.get-color-tokens($theme);\n\n    // Add values for MDC list tokens.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-list-theme.theme($mdc-list-color-tokens);\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-color-tokens($theme));\n    }\n\n    .mdc-list-item__start,\n    .mdc-list-item__end {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme, primary));\n    }\n\n    .mat-accent {\n      .mdc-list-item__start,\n      .mdc-list-item__end {\n        @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme, accent));\n      }\n    }\n\n    .mat-warn {\n      .mdc-list-item__start,\n      .mdc-list-item__end {\n        @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme, warn));\n      }\n    }\n\n    .mat-mdc-list-option {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme, primary));\n    }\n    .mat-mdc-list-option.mat-accent {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme, accent));\n    }\n    .mat-mdc-list-option.mat-warn {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme, warn));\n    }\n\n    // There is no token for activated color on nav list.\n    // TODO(mmalerba): Add a token to MDC or make a custom one.\n    .mat-mdc-list-base.mat-mdc-list-base {\n      @include evolution-mixins.list-selected-ink-color(\n          inspection.get-theme-color($theme, primary));\n    }\n\n    // TODO(mmalerba): Leaking styles from the old MDC list mixins used in other components can\n    //  cause opacity issues, so we need this override for now. We can remove it when all\n    //  Angular Material components stop using the old MDC mixins.\n    .mat-mdc-list-base .mdc-list-item--disabled {\n      .mdc-list-item__start,\n      .mdc-list-item__content,\n      .mdc-list-item__end {\n        opacity: 1;\n      }\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $density-scale: inspection.get-theme-density($theme);\n    $mdc-list-density-tokens: tokens-mdc-list.get-density-tokens($theme);\n\n    // Add values for MDC list tokens.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-list-theme.theme($mdc-list-density-tokens);\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-density-tokens($theme));\n    }\n\n    .mdc-list-item__start,\n    .mdc-list-item__end {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-density-tokens($theme));\n    }\n\n    // TODO(mmalerba): This is added to maintain the same style MDC used prior to the token-based\n    //  API, to avoid screenshot diffs. We should remove it in favor of following MDC's current\n    //  style, or add custom tokens for it.\n    .mat-mdc-list-item {\n      &.mdc-list-item--with-leading-avatar,\n      &.mdc-list-item--with-leading-checkbox,\n      &.mdc-list-item--with-leading-icon {\n        &.mdc-list-item--with-one-line {\n          height: map.get((\n            0: 56px,\n            -1: 52px,\n            -2: 48px,\n            -3: 44px,\n            -4: 40px,\n            -5: 40px,\n          ), $density-scale);\n        }\n\n        &.mdc-list-item--with-two-lines {\n          height: map.get((\n            0: 72px,\n            -1: 68px,\n            -2: 64px,\n            -3: 60px,\n            -4: 56px,\n            -5: 56px,\n          ), $density-scale);\n        }\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    $mdc-list-typography-tokens: tokens-mdc-list.get-typography-tokens($theme);\n\n    // Add values for MDC list tokens.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-list-theme.theme($mdc-list-typography-tokens);\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-typography-tokens($theme));\n    }\n\n    // MDC does not have tokens for the subheader.\n    // TODO(mmalerba): Discuss with MDC about adding them, or create custom tokens.\n    .mdc-list-group__subheader {\n      font: inspection.get-theme-typography($theme, subtitle-1, font);\n      letter-spacing: inspection.get-theme-typography($theme, subtitle-1, letter-spacing);\n    }\n  }\n}\n\n@mixin theme($theme) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-list') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme));\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @include mdc-list-theme.theme(token-utils.get-tokens-for($tokens, tokens-mdc-list.$prefix));\n\n  $mat-list-tokens: token-utils.get-tokens-for($tokens, tokens-mat-list.$prefix);\n  @include token-utils.create-token-values(tokens-mat-list.$prefix, $mat-list-tokens);\n}\n","//\n// Copyright 2022 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Internal stylesheet for material list component. Selector '.mdc-*' should\n// only be used in this project.\n\n@use '@material/density/functions' as density-functions;\n@use '@material/dom/mixins' as dom-mixins;\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/ripple/ripple-theme';\n@use '@material/ripple/ripple';\n@use '@material/rtl/rtl';\n@use '@material/shape/mixins' as shape-mixins;\n@use '@material/theme/theme-color';\n@use '@material/theme/theme';\n@use '@material/typography/typography';\n@use './evolution-variables' as variables;\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:math';\n\n$ripple-target: variables.$ripple-target;\n\n@mixin static-styles($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include _high-contrast-mode($query: $query);\n  .mdc-list {\n    @include _static-list-base($query: $query);\n  }\n\n  .mdc-list-item__wrapper {\n    @include feature-targeting.targets($feat-structure) {\n      display: block;\n    }\n  }\n\n  .mdc-list-item {\n    @include item-base($query: $query);\n    @include _list-item-baseline-height($query: $query);\n    @include one-line-item-start-alignment(center, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n    @include three-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n\n    @include one-line-item-end-alignment(center, $query: $query);\n    @include two-line-item-end-alignment(center, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n\n    @include feature-targeting.targets($feat-structure) {\n      align-items: stretch;\n      cursor: pointer;\n    }\n\n    // Reset mouse cursor for disabled and non-interactive items.\n    &.mdc-list-item--disabled,\n    &.mdc-list-item--non-interactive {\n      @include feature-targeting.targets($feat-structure) {\n        cursor: auto;\n      }\n    }\n\n    // TODO(b/254711887): Likely need to update this to adhere to a HCM focus\n    // ring spec.\n    // For components using aria-activedescendant, the focus pseudoclass is\n    // never applied and use `.mdc-ripple-upgraded--background-focused` instead.\n    &:not(.mdc-list-item--selected):focus::before,\n    &.mdc-ripple-upgraded--background-focused::before {\n      @include dom-mixins.transparent-border($query: $query);\n    }\n\n    &.mdc-list-item--selected::before {\n      @include dom-mixins.transparent-border(\n        $border-width: 3px,\n        $border-style: double,\n        $query: $query\n      );\n    }\n\n    &.mdc-list-item--selected:focus::before {\n      @include dom-mixins.transparent-border(\n        $border-width: 3px,\n        $query: $query\n      );\n    }\n  }\n\n  // stylelint-disable selector-max-type --\n  // Override anchor tag styles for the use-case of a list being used for navigation\n  a.mdc-list-item {\n    @include feature-targeting.targets($feat-structure) {\n      color: inherit;\n      text-decoration: none;\n    }\n  }\n  // stylelint-enable selector-max-type\n\n  .mdc-list-item__start {\n    @include feature-targeting.targets($feat-structure) {\n      fill: currentColor;\n      flex-shrink: 0;\n      pointer-events: none;\n    }\n  }\n\n  .mdc-list-item__end {\n    @include feature-targeting.targets($feat-structure) {\n      flex-shrink: 0;\n      pointer-events: none;\n    }\n  }\n\n  .mdc-list-item__content {\n    @include typography.overflow-ellipsis($query);\n    @include feature-targeting.targets($feat-structure) {\n      align-self: center;\n      flex: 1;\n      pointer-events: none;\n    }\n\n    .mdc-list-item--with-two-lines &,\n    .mdc-list-item--with-three-lines & {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: stretch;\n      }\n    }\n\n    // Disable interaction on label elements that may automatically\n    // toggle corresponding checkbox / radio input.\n    &[for] {\n      @include feature-targeting.targets($feat-structure) {\n        pointer-events: none;\n      }\n    }\n  }\n\n  .mdc-list-item__primary-text {\n    @include typography.overflow-ellipsis($query);\n\n    .mdc-list-item--with-two-lines &,\n    .mdc-list-item--with-three-lines & {\n      @include typography.text-baseline(\n        $top: 28px,\n        $bottom: 20px,\n        $query: $query\n      );\n    }\n  }\n\n  .mdc-list-item__secondary-text {\n    @include typography.overflow-ellipsis($query);\n    @include typography.text-baseline(\n      $top: 20px,\n      $display: block,\n      $query: $query\n    );\n\n    .mdc-list-item--with-three-lines & {\n      @include feature-targeting.targets($feat-structure) {\n        white-space: normal;\n        line-height: 20px;\n      }\n    }\n\n    .mdc-list-item--with-overline & {\n      @include feature-targeting.targets($feat-structure) {\n        white-space: nowrap;\n        line-height: auto;\n      }\n    }\n  }\n\n  .mdc-list-item__overline-text {\n    @include typography.overflow-ellipsis($query);\n\n    .mdc-list-item--with-two-lines & {\n      @include typography.text-baseline(\n        $top: 24px,\n        $bottom: 20px,\n        $query: $query\n      );\n    }\n\n    .mdc-list-item--with-three-lines & {\n      @include typography.text-baseline(\n        $top: 28px,\n        $bottom: 20px,\n        $query: $query\n      );\n    }\n  }\n\n  .mdc-list-item--with-leading-avatar {\n    @include item-start-spacing(16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        border-radius: 50%;\n      }\n    }\n  }\n\n  .mdc-list-item--with-leading-icon {\n    @include item-start-spacing(\n      $leading: 16px,\n      $trailing: 32px,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-thumbnail {\n    @include item-start-spacing(16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-image {\n    @include item-start-spacing(16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _one-line-item-taller-density(\n      variables.$one-line-item-density-scale,\n      $query: $query\n    );\n    @include _two-line-item-tall-density(\n      variables.$two-line-item-density-scale,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-leading-video {\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 8px,\n      $query: $query\n    );\n    @include item-start-spacing($leading: 0, $trailing: 16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _one-line-item-taller-density(\n      variables.$one-line-item-density-scale,\n      $query: $query\n    );\n    @include _two-line-item-tall-density(\n      variables.$two-line-item-density-scale,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-leading-checkbox {\n    $leading: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-start-spacing($leading, $trailing, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-radio {\n    $leading: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-start-spacing($leading, $trailing, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-switch {\n    @include item-start-spacing(16px, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-trailing-icon {\n    @include item-end-spacing(16px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-meta {\n    @include two-line-item-end-alignment(flex-start, $query: $query);\n    @include three-line-item-end-alignment(flex-start, $query: $query);\n    @include item-end-spacing($leading: 28px, $trailing: 16px, $query: $query);\n    @include _multi-line-item-end-text-baseline($query: $query);\n\n    .mdc-list-item__end {\n      @include typography.typography(caption, $query);\n    }\n  }\n\n  .mdc-list-item--with-trailing-checkbox {\n    $leading: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-end-spacing($leading, $trailing, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-trailing-radio {\n    $leading: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-end-spacing($leading, $trailing, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-trailing-switch {\n    @include item-end-spacing(16px, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-overline {\n    @include _two-line-item-primary-text-baseline(20px, 0px, $query: $query);\n    @include _three-line-item-primary-baseline(20px, 0px, $query: $query);\n  }\n\n  // This must be specified last to ensure that RTL padding takes priority over\n  // LTR padding in the cascade.\n  .mdc-list-item {\n    @include item-spacing(16px, $query: $query);\n  }\n\n  //\n  // Grouping\n  //\n  .mdc-list-group {\n    @include feature-targeting.targets($feat-structure) {\n      // Cancel top/bottom padding on individual lists within group\n      .mdc-deprecated-list {\n        padding: 0;\n      }\n    }\n  }\n  .mdc-list-group__subheader {\n    @include _list-group-subheader-margin($query: $query);\n  }\n\n  //\n  // Dividers\n  //\n\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-structure) {\n      padding: 0;\n\n      // Allows the use of padding to specify leading and trailing insets\n      // independently.\n      background-clip: content-box;\n    }\n  }\n\n  // The base inset variant corresponds to the item's padding.\n  .mdc-list-divider,\n  .mdc-list-divider--with-leading-text,\n  .mdc-list-divider--with-leading-icon,\n  .mdc-list-divider--with-leading-image,\n  .mdc-list-divider--with-leading-thumbnail,\n  .mdc-list-divider--with-leading-avatar,\n  .mdc-list-divider--with-leading-checkbox,\n  .mdc-list-divider--with-leading-switch,\n  .mdc-list-divider--with-leading-radio {\n    @include divider-leading-inset(16px, $query: $query);\n    @include divider-trailing-inset(16px, $query: $query);\n  }\n\n  .mdc-list-divider--with-leading-video {\n    @include divider-leading-inset(0px, $query: $query);\n  }\n\n  // This is needed to ensure that default padding isn't applied in RTL locales.\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-structure) {\n      @include rtl.rtl {\n        padding: 0;\n      }\n    }\n  }\n}\n\n@mixin core-styles($query: feature-targeting.all()) {\n  @include without-ripple($query);\n  @include with-ripple($query);\n}\n\n@mixin without-ripple($query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n  $feat-structure: feature-targeting.create-target($query, structure);\n  $feat-typography: feature-targeting.create-target($query, typography);\n\n  //\n  // Items\n  //\n\n  @include list-primary-text-ink-color(text-primary-on-background, $query);\n  @include list-secondary-text-ink-color(text-secondary-on-background, $query);\n  @include list-overline-text-ink-color(text-hint-on-background, $query);\n  @include list-icon-fill-color(transparent, $query);\n  @include list-icon-ink-color(text-icon-on-background, $query);\n  @include list-meta-text-ink-color(text-hint-on-background, $query);\n  @include list-disabled-opacity(variables.$content-disabled-opacity, $query);\n  @include list-disabled-ink-color(variables.$content-disabled-color, $query);\n  @include list-selected-ink-color(variables.$content-selected-color, $query);\n\n  @include group-subheader-ink-color(text-primary-on-background, $query);\n\n  @include _high-contrast-mode-border-color($query);\n\n  .mdc-list {\n    @include _typography-list-base($query: $query);\n  }\n\n  .mdc-list-item__primary-text {\n    @include typography.typography(subtitle1, $query);\n  }\n\n  .mdc-list-item__secondary-text {\n    @include typography.typography(body2, $query);\n  }\n\n  .mdc-list-item__overline-text {\n    @include typography.typography(overline, $query);\n  }\n\n  .mdc-list-item--with-leading-avatar {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-icon {\n    @include item-start-size(24px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-thumbnail {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-image {\n    @include item-start-size(56px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-video {\n    @include item-start-size($width: 100px, $height: 56px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-checkbox {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-radio {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-switch {\n    @include item-start-size($width: 36px, $height: 20px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-icon {\n    @include item-end-size(24px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-meta {\n    .mdc-list-item__end {\n      @include typography.typography(caption, $query);\n    }\n  }\n\n  .mdc-list-item--with-trailing-checkbox {\n    @include item-end-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-radio {\n    @include item-end-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-switch {\n    @include item-end-size($width: 36px, $height: 20px, $query: $query);\n  }\n\n  .mdc-list-group__subheader {\n    @include typography.typography(subtitle1, $query);\n  }\n\n  //\n  // Dividers\n  //\n\n  $divider-color: if(\n    theme-color.tone(theme-color.$background) == 'dark',\n    variables.$divider-color-on-dark-bg,\n    variables.$divider-color-on-light-bg\n  );\n\n  @include divider-color($divider-color, $query: $query);\n  @include divider-height(1px, $query: $query);\n  @include static-styles($query: $query);\n} // end of without-ripple\n\n@mixin with-ripple($query: feature-targeting.all()) {\n  @include ripple.common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  :not(.mdc-list-item--disabled).mdc-list-item {\n    @include _item-interactive-ripple($query);\n  }\n}\n\n///\n/// Adjusts an offset (i.e., margin) to accomodate contents that are larger than\n/// the space allocated by the specification.\n///\n/// For instance, the specification provides 24x24dp for a checkbox with a 16dp\n/// margin. However, checkboxes are actually 40x40dp. To ensure that the\n/// checkbox is positioned correctly, the margin is reduced by 8dp to reflect\n/// that the margin is already \"baked into\" the checkbox.\n///\n/// Concretely, 40dp - 24dp = 16dp. Assuming that the control is symmetrical,\n/// half of the overflow (8dp) is on the leading side and half on the trailing\n/// side. Therefore, the leading and trailing margins are reduced by 8dp.\n///\n/// Note: this might be more useful if it's added into the leading/trailing\n/// margin mixins as a parameter.\n///\n@function absorb-overflow($offset, $actual, $available, $symmetric: true) {\n  @if $actual <= $available {\n    @return $offset;\n  }\n  $overflow: $actual - $available;\n  @return $offset - math.div($overflow, if($symmetric, 2, 1));\n}\n\n@mixin one-line-item-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-one-line {\n    @include feature-targeting.targets($feat-structure) {\n      height: $height;\n    }\n  }\n}\n\n@mixin two-line-item-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-two-lines {\n    @include feature-targeting.targets($feat-structure) {\n      height: $height;\n    }\n  }\n}\n@mixin three-line-item-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-three-lines {\n    @include feature-targeting.targets($feat-structure) {\n      height: $height;\n    }\n  }\n}\n\n@mixin list-item-height($height) {\n  &.mdc-list-item--with-one-line,\n  &.mdc-list-item--with-two-lines,\n  &.mdc-list-item--with-three-lines {\n    @include theme.property(height, $height);\n  }\n}\n\n@mixin item-spacing(\n  $leading,\n  $trailing: $leading,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    @include rtl.reflexive-property(padding, $leading, $trailing);\n  }\n}\n\n@mixin one-line-item-start-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-one-line {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin two-line-item-start-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin three-line-item-start-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin one-line-item-end-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-one-line {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin two-line-item-end-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin three-line-item-end-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin item-start-spacing(\n  $leading,\n  $trailing: $leading,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    // Extra specificity needed to override default customizations.\n    &.mdc-list-item {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, 0, auto);\n    }\n\n    .mdc-list-item__start {\n      @include rtl.reflexive-property(margin, $leading, $trailing);\n    }\n  }\n}\n\n@mixin item-end-spacing(\n  $leading,\n  $trailing: $leading,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    // Extra specificity needed to override default customizations.\n    &.mdc-list-item {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, auto, 0);\n    }\n\n    .mdc-list-item__end {\n      @include rtl.reflexive-property(margin, $leading, $trailing);\n    }\n  }\n}\n\n@mixin item-start-size(\n  $width,\n  $height: $width,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    .mdc-list-item__start {\n      @include theme.property(width, $width);\n      @include theme.property(height, $height);\n    }\n  }\n}\n\n@mixin item-end-size($width, $height: $width, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    .mdc-list-item__end {\n      @include theme.property(width, $width);\n      @include theme.property(height, $height);\n    }\n  }\n}\n\n@mixin list-item-selected-container-color($color) {\n  &.mdc-list-item.mdc-list-item--selected {\n    @include theme.property(background-color, $color);\n  }\n}\n\n@mixin list-primary-text-typography($typography-theme) {\n  .mdc-list-item__primary-text {\n    @include typography.theme-styles($typography-theme);\n  }\n}\n\n@mixin list-primary-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__primary-text {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-secondary-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__secondary-text {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-secondary-text-typography($typography-theme) {\n  .mdc-list-item__secondary-text {\n    @include typography.theme-styles($typography-theme);\n  }\n}\n\n@mixin list-overline-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__overline-text {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-meta-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__end {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-icon-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--with-leading-icon .mdc-list-item__start,\n  .mdc-list-item--with-trailing-icon .mdc-list-item__end {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-icon-fill-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--with-leading-icon .mdc-list-item__start,\n  .mdc-list-item--with-trailing-icon .mdc-list-item__end {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(background-color, $color);\n    }\n  }\n}\n\n@mixin list-selected-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--selected,\n  .mdc-list-item--activated {\n    @include list-primary-text-ink-color($color, $query);\n    @include _item-icon-ink-color($color, $leading-only: true, $query: $query);\n  }\n}\n\n@mixin list-selected-meta-text-ink-color(\n  $color,\n  $query: feature-targeting.all()\n) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--selected,\n  .mdc-list-item--activated {\n    @include list-meta-text-ink-color($color, $query);\n  }\n}\n\n@mixin list-disabled-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--disabled {\n    @include list-primary-text-ink-color($color, $query);\n    @include list-secondary-text-ink-color($color, $query);\n    @include list-overline-text-ink-color($color, $query);\n    @include _item-icon-ink-color($color, $query: $query);\n    @include item-meta-text-ink-color($color, $query);\n  }\n}\n\n@mixin list-disabled-opacity($opacity, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--disabled {\n    .mdc-list-item__start,\n    .mdc-list-item__content,\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(opacity, $opacity);\n      }\n    }\n  }\n}\n\n@mixin group-subheader-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-deprecated-list-group__subheader {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n///\n/// Sets shape radius (rounded) to single line list variant.\n///\n/// @param {Number | List<Number>} $radius Radius size in `px` or percentage. It can be 4 value corner or single radius.\n///     Set to `50%` for rounded shape.\n/// @param {Boolean} $rtl-reflexive Set to true to flip border radius in RTL context. Defaults to `false`.\n/// @param {Number} $density-scale Density scale of single line list. Set this only when custom density is applied.\n///     Defaults to `$mdc-deprecated-list-single-line-density-scale`.\n///\n/// @access public\n///\n@mixin one-line-list-radius(\n  $radius,\n  $rtl-reflexive: false,\n  $density-scale: variables.$one-line-item-density-scale,\n  $query: feature-targeting.all()\n) {\n  .mdc-list-item--with-one-line {\n    @include shape-mixins.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height:\n        density-functions.prop-value(\n          $density-config: variables.$one-line-item-density-config,\n          $density-scale: $density-scale,\n          $property-name: height\n        ),\n      $query: $query\n    );\n\n    &.mdc-list-item--with-leading-avatar,\n    &.mdc-list-item--with-leading-icon,\n    &.mdc-list-item--with-leading-thumbnail,\n    &.mdc-list-item--with-leading-checkbox,\n    &.mdc-list-item--with-leading-radio,\n    &.mdc-list-item--with-leading-switch {\n      @include shape-mixins.radius(\n        $radius,\n        $rtl-reflexive,\n        $component-height:\n          density-functions.prop-value(\n            $density-config: variables.$one-line-item-tall-density-config,\n            $density-scale: $density-scale,\n            $property-name: height\n          ),\n        $query: $query\n      );\n    }\n\n    &.mdc-list-item--with-leading-image,\n    &.mdc-list-item--with-leading-video {\n      @include shape-mixins.radius(\n        $radius,\n        $rtl-reflexive,\n        $component-height:\n          density-functions.prop-value(\n            $density-config: variables.$one-line-item-taller-density-config,\n            $density-scale: $density-scale,\n            $property-name: height\n          ),\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin two-line-list-radius(\n  $radius,\n  $rtl-reflexive: false,\n  $density-scale: variables.$two-line-item-density-scale,\n  $query: feature-targeting.all()\n) {\n  .mdc-list-item--with-two-lines {\n    @include shape-mixins.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height:\n        density-functions.prop-value(\n          $density-config: variables.$two-line-item-density-config,\n          $density-scale: $density-scale,\n          $property-name: height\n        ),\n      $query: $query\n    );\n\n    &.mdc-list-item--with-leading-avatar,\n    &.mdc-list-item--with-leading-icon,\n    &.mdc-list-item--with-leading-thumbnail,\n    &.mdc-list-item--with-leading-checkbox,\n    &.mdc-list-item--with-leading-radio,\n    &.mdc-list-item--with-leading-switch,\n    &.mdc-list-item--with-leading-image,\n    &.mdc-list-item--with-leading-video {\n      @include shape-mixins.radius(\n        $radius,\n        $rtl-reflexive,\n        $component-height:\n          density-functions.prop-value(\n            $density-config: variables.$two-line-item-tall-density-config,\n            $density-scale: $density-scale,\n            $property-name: height\n          ),\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin three-line-list-radius(\n  $radius,\n  $rtl-reflexive: false,\n  $density-scale: variables.$three-line-item-density-scale,\n  $query: feature-targeting.all()\n) {\n  .mdc-list-item--with-three-lines {\n    @include shape-mixins.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height:\n        density-functions.prop-value(\n          $density-config: variables.$three-line-item-density-config,\n          $density-scale: $density-scale,\n          $property-name: height\n        ),\n      $query: $query\n    );\n  }\n}\n\n@mixin divider-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(background-color, $color);\n    }\n  }\n}\n\n@mixin divider-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(height, $height);\n    }\n  }\n}\n\n@mixin divider-leading-inset($inset, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-divider--with-leading-inset {\n    @include feature-targeting.targets($feat-structure) {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, $inset, auto);\n    }\n  }\n}\n\n@mixin divider-trailing-inset($inset, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-divider--with-trailing-inset {\n    @include feature-targeting.targets($feat-structure) {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, auto, $inset);\n    }\n  }\n}\n\n// The public density mixins apply the appropriate density styles regardless of\n// the item's start contents.\n@mixin one-line-item-density(\n  $density-scale,\n  $exclude-variants: false,\n  $query: feature-targeting.all()\n) {\n  @include _one-line-item-density($density-scale, $query: $query);\n\n  @if not $exclude-variants {\n    &.mdc-list-item--with-leading-avatar,\n    &.mdc-list-item--with-leading-icon,\n    &.mdc-list-item--with-leading-thumbnail,\n    &.mdc-list-item--with-leading-checkbox,\n    &.mdc-list-item--with-leading-radio,\n    &.mdc-list-item--with-leading-switch {\n      @include _one-line-item-tall-density($density-scale, $query: $query);\n    }\n\n    &.mdc-list-item--with-leading-image,\n    &.mdc-list-item--with-leading-video {\n      @include _one-line-item-taller-density($density-scale, $query: $query);\n    }\n  }\n}\n\n@mixin two-line-item-density($density-scale, $query: feature-targeting.all()) {\n  @include _two-line-item-density($density-scale, $query: $query);\n\n  &.mdc-list-item--with-leading-avatar,\n  &.mdc-list-item--with-leading-icon,\n  &.mdc-list-item--with-leading-thumbnail,\n  &.mdc-list-item--with-leading-checkbox,\n  &.mdc-list-item--with-leading-radio,\n  &.mdc-list-item--with-leading-switch,\n  &.mdc-list-item--with-leading-image,\n  &.mdc-list-item--with-leading-video {\n    @include _two-line-item-tall-density($density-scale, $query: $query);\n  }\n}\n\n@mixin three-line-item-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  @include _three-line-item-density($density-scale, $query: $query);\n}\n\n//\n// Private\n//\n\n// Mixins that apply baseline height for one-, two-, and three- line item\n// container heights. This mixin calls the density mixins so that the styles\n// can be overwritten by future density mixin calls.\n@mixin _list-item-baseline-height($query: feature-targeting.all()) {\n  @include _one-line-item-density(\n    variables.$one-line-item-density-scale,\n    $query: $query\n  );\n\n  @include _two-line-item-density(\n    variables.$two-line-item-density-scale,\n    $query: $query\n  );\n\n  @include _three-line-item-density(\n    variables.$three-line-item-density-scale,\n    $query: $query\n  );\n}\n\n@mixin _tall-list-item-baseline-height($query: feature-targeting.all()) {\n  @include _one-line-item-tall-density(\n    variables.$one-line-item-density-scale,\n    $query: $query\n  );\n  @include _two-line-item-tall-density(\n    variables.$two-line-item-density-scale,\n    $query: $query\n  );\n}\n\n// The private density mixins allow density properties to be overridden\n// individually to avoid increasing specificity.\n\n@mixin _one-line-item-density($density-scale, $query: feature-targeting.all()) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$one-line-item-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include one-line-item-height($height, $query: $query);\n}\n\n@mixin _one-line-item-tall-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$one-line-item-tall-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include one-line-item-height($height, $query: $query);\n}\n\n@mixin _one-line-item-taller-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$one-line-item-taller-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include one-line-item-height($height, $query: $query);\n}\n\n@mixin _two-line-item-density($density-scale, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  $height: density-functions.prop-value(\n    $density-config: variables.$two-line-item-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include two-line-item-height($height, $query: $query);\n\n  @if ($density-scale and $density-scale != 0) {\n    &.mdc-list-item--with-two-lines {\n      .mdc-list-item__content {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n      .mdc-list-item__primary-text,\n      .mdc-list-item__secondary-text {\n        margin-top: 0px;\n        margin-bottom: 0px;\n        line-height: 1.4;\n        &::before,\n        &::after {\n          display: none;\n        }\n      }\n    }\n  }\n}\n\n@mixin _two-line-item-tall-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$two-line-item-tall-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include two-line-item-height($height, $query: $query);\n}\n\n@mixin _three-line-item-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$three-line-item-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include three-line-item-height($height, $query: $query);\n}\n\n// Split the list-base mixin into two sub-mixins, one holding the\n// structural/static styles (static-list-base) and the other holding styles\n// that are themable (typography-list-base). However, the existing list-base\n// mixin need to be preserved as Angular calls this mixin for autocomplete\n// base styling.\n@mixin _typography-list-base($query: feature-targeting.all()) {\n  $feat-typography: feature-targeting.create-target($query, typography);\n  @include typography.typography(subtitle1, $query);\n  @include feature-targeting.targets($feat-typography) {\n    // According to the mocks and stickersheet, the line-height is\n    // adjusted to 24px for text content, same as for body1.\n    /* @alternate */\n    line-height: map.get(map.get(typography.$styles, body1), line-height);\n  }\n}\n\n@mixin _static-list-base($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    margin: 0;\n    padding: 8px 0;\n    list-style-type: none;\n\n    &:focus // lint-disable-focus-psuedo-selector\n    {\n      outline: none;\n    }\n  }\n}\n\n@mixin list-base($query: feature-targeting.all()) {\n  @include _typography-list-base($query: $query);\n  @include _static-list-base($query: $query);\n}\n\n@mixin item-base($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    display: flex;\n    position: relative;\n    align-items: center;\n    justify-content: flex-start;\n    overflow: hidden;\n    padding: 0;\n\n    &:focus // lint-disable-focus-psuedo-selector\n    {\n      outline: none;\n    }\n  }\n}\n\n@mixin _item-interactive-ripple($query: feature-targeting.all()) {\n  @include ripple.surface(\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple.radius-bounded(\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple-theme.states(\n    theme-color.prop-value(on-surface),\n    false,\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple-theme.states-activated(\n    primary,\n    false,\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple-theme.states-selected(\n    primary,\n    false,\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n\n  #{variables.$ripple-target} {\n    @include ripple.surface-styles($query: $query);\n    @include ripple.target-common($query: $query);\n  }\n}\n\n@mixin _two-line-item-text-baseline($query: feature-targeting.all()) {\n  @include _two-line-item-primary-text-baseline(32px, 20px, $query: $query);\n  @include _two-line-item-overline-text-baseline(28px, 20px, $query: $query);\n  @include _two-line-item-meta-text-baseline($top: 32px, $query: $query);\n}\n\n@mixin _two-line-item-primary-text-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__primary-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _three-line-item-primary-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__primary-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _two-line-item-overline-text-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__overline-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _three-line-item-overline-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__overline-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _multi-line-item-end-text-baseline($query: feature-targeting.all()) {\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__end {\n      @include typography.text-baseline(\n        $display: block,\n        $top: 28px,\n        $query: $query\n      );\n    }\n  }\n\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__end {\n      @include typography.text-baseline(\n        $display: block,\n        $top: 28px,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _two-line-item-meta-text-baseline(\n  $top,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-two-lines {\n    &.mdc-list-item--with-trailing-meta {\n      .mdc-list-item__end {\n        @include typography.text-baseline(\n          $display: block,\n          $top: $top,\n          $query: $query\n        );\n      }\n    }\n  }\n}\n\n@mixin item-meta-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  &.mdc-list-item--with-trailing-meta {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(color, $color);\n      }\n    }\n  }\n}\n\n@mixin _item-icon-ink-color(\n  $color,\n  $leading-only: false,\n  $query: feature-targeting.all()\n) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  &.mdc-list-item--with-leading-icon {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(color, $color);\n      }\n    }\n  }\n\n  @if (not $leading-only) {\n    &.mdc-list-item--with-trailing-icon {\n      .mdc-list-item__end {\n        @include feature-targeting.targets($feat-color) {\n          @include theme.property(color, $color);\n        }\n      }\n    }\n  }\n}\n\n@mixin _high-contrast-mode-border-color($query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n  .mdc-list-divider::after {\n    @include feature-targeting.targets($feat-color) {\n      // Color ensures border is shown, but will be overridden by the browser.\n      @include theme.property(border-bottom-color, white);\n    }\n  }\n}\n\n@mixin _high-contrast-mode($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include dom-mixins.forced-colors-mode {\n    .mdc-list-divider::after {\n      @include feature-targeting.targets($feat-structure) {\n        content: '';\n        display: block;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n      }\n    }\n  }\n}\n\n@mixin _list-group-subheader-margin($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  $mdc-list-subheader-virtual-height: 3rem;\n  $mdc-list-subheader-leading: map.get(\n    map.get(typography.$styles, body1),\n    line-height\n  );\n  $mdc-list-subheader-margin: calc(\n    (#{$mdc-list-subheader-virtual-height} - #{$mdc-list-subheader-leading}) / 2\n  );\n\n  @include feature-targeting.targets($feat-structure) {\n    margin: $mdc-list-subheader-margin variables.$side-padding;\n  }\n}\n","@use '@material/tab-indicator/tab-indicator-theme' as mdc-tab-indicator-theme;\n@use '@material/tab/tab-theme' as mdc-tab-theme;\n@use '../core/style/sass-utils';\n@use '../core/tokens/m2/mdc/tab' as tokens-mdc-tab;\n@use '../core/tokens/m2/mdc/tab-indicator' as tokens-mdc-tab-indicator;\n@use '../core/tokens/m2/mat/tab-header' as tokens-mat-tab-header;\n@use '../core/tokens/m2/mat/tab-header-with-background' as tokens-mat-tab-header-with-background;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/token-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-tab.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-tab-indicator-theme.theme(tokens-mdc-tab-indicator.get-unthemable-tokens());\n      @include mdc-tab-theme.secondary-navigation-tab-theme(tokens-mdc-tab.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-tab-header.$prefix, tokens-mat-tab-header.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-tab-header-with-background.$prefix,\n          tokens-mat-tab-header-with-background.get-unthemable-tokens()\n      );\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the tab indicator: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-tab-group, .mat-mdc-tab-nav-bar {\n      @include _palette-styles($theme, primary);\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n\n      &.mat-background-primary {\n        @include _background-styles($theme, primary);\n      }\n\n      &.mat-background-accent {\n        @include _background-styles($theme, accent);\n      }\n\n      &.mat-background-warn {\n        @include _background-styles($theme, warn);\n      }\n    }\n  }\n}\n\n@mixin _background-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n    tokens-mat-tab-header-with-background.get-color-tokens($theme, $palette-name));\n}\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include mdc-tab-theme.secondary-navigation-tab-theme(\n    tokens-mdc-tab.get-color-tokens($theme, $palette-name));\n  @include mdc-tab-indicator-theme.theme(\n    tokens-mdc-tab-indicator.get-color-tokens($theme, $palette-name));\n  @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n   tokens-mat-tab-header.get-color-tokens($theme, $palette-name));\n}\n\n/// Outputs typography theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    .mat-mdc-tab-header {\n      @include mdc-tab-theme.secondary-navigation-tab-theme(\n          tokens-mdc-tab.get-typography-tokens($theme));\n      @include mdc-tab-indicator-theme.theme(\n          tokens-mdc-tab-indicator.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n        tokens-mat-tab-header.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n        tokens-mat-tab-header-with-background.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    .mat-mdc-tab-header {\n      @include mdc-tab-theme.secondary-navigation-tab-theme(\n          tokens-mdc-tab.get-density-tokens($theme));\n      @include mdc-tab-indicator-theme.theme(\n          tokens-mdc-tab-indicator.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n        tokens-mat-tab-header.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n        tokens-mat-tab-header-with-background.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the tab indicator: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-tab-indicator-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mdc-tab-indicator.$prefix, $options...);\n  $mat-tab-header-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mat-tab-header.$prefix, $options...);\n  // Don't pass $options here, because the mdc-tab doesn't have color variants,\n  // only the mdc-tab-indicator and mat-tab-header do.\n  $mdc-tab-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-tab.$prefix);\n  @include mdc-tab-theme.secondary-navigation-tab-theme($mdc-tab-tokens);\n  @include mdc-tab-indicator-theme.theme($mdc-tab-indicator-tokens);\n  @include token-utils.create-token-values(tokens-mat-tab-header.$prefix, $mat-tab-header-tokens);\n}\n","@use '@material/checkbox/checkbox-theme' as mdc-checkbox-theme;\n@use '@material/form-field/form-field-theme' as mdc-form-field-theme;\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;\n@use '../core/tokens/m2/mdc/form-field' as tokens-mdc-form-field;\n@use '../core/tokens/m2/mat/checkbox' as tokens-mat-checkbox;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-checkbox.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix, tokens-mat-checkbox.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the checkbox: primary, secondary, tertiary, or\n///     error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix, tokens-mat-checkbox.get-color-tokens($theme));\n    }\n\n    .mat-mdc-checkbox {\n      @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-color-tokens($theme));\n\n      &.mat-primary {\n        @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme, primary));\n      }\n\n      &.mat-warn {\n        @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-typography-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix, tokens-mat-checkbox.get-typography-tokens($theme));\n    }\n\n    .mat-mdc-checkbox {\n      @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  $density-scale: inspection.get-theme-density($theme);\n\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-density-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix, tokens-mat-checkbox.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the checkbox: primary, secondary, tertiary, or\n///     error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-checkbox-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mdc-checkbox.$prefix, $options...);\n  // Don't pass $options here, since the mdc-form-field doesn't support color options,\n  // only the mdc-checkbox does.\n  $mdc-form-field-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-form-field.$prefix);\n  $mat-checkbox-tokens: token-utils.get-tokens-for($tokens, tokens-mat-checkbox.$prefix);\n  @include mdc-checkbox-theme.theme($mdc-checkbox-tokens);\n  @include mdc-form-field-theme.theme($mdc-form-field-tokens);\n  @include token-utils.create-token-values(tokens-mat-checkbox.$prefix, $mat-checkbox-tokens);\n}\n","@use '@material/button/button-text-theme' as mdc-button-text-theme;\n@use '@material/button/button-filled-theme' as mdc-button-filled-theme;\n@use '@material/button/button-protected-theme' as mdc-button-protected-theme;\n@use '@material/button/button-outlined-theme' as mdc-button-outlined-theme;\n\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/filled-button' as tokens-mdc-filled-button;\n@use '../core/tokens/m2/mat/filled-button' as tokens-mat-filled-button;\n@use '../core/tokens/m2/mdc/outlined-button' as tokens-mdc-outlined-button;\n@use '../core/tokens/m2/mat/outlined-button' as tokens-mat-outlined-button;\n@use '../core/tokens/m2/mdc/protected-button' as tokens-mdc-protected-button;\n@use '../core/tokens/m2/mat/protected-button' as tokens-mat-protected-button;\n@use '../core/tokens/m2/mdc/text-button' as tokens-mdc-text-button;\n@use '../core/tokens/m2/mat/text-button' as tokens-mat-text-button;\n@use '../core/style/sass-utils';\n\n@mixin _text-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-text-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-text-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-text-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-text-button.get-color-tokens($theme)\n  );\n\n  @include mdc-button-text-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-text-button.$prefix, $mat-tokens);\n}\n\n@mixin _filled-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-filled-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-filled-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-filled-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-filled-button.get-color-tokens($theme)\n  );\n\n  @include mdc-button-filled-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-filled-button.$prefix, $mat-tokens);\n}\n\n@mixin _protected-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-protected-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-protected-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-protected-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-protected-button.get-color-tokens($theme)\n  );\n\n  @include mdc-button-protected-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-protected-button.$prefix, $mat-tokens);\n}\n\n@mixin _outlined-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-outlined-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-outlined-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-outlined-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-outlined-button.get-color-tokens($theme)\n  );\n\n  @include mdc-button-outlined-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix, $mat-tokens);\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-text-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-text-button.$prefix, $options...);\n  $mdc-protected-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-protected-button.$prefix, $options...);\n  $mdc-filled-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-filled-button.$prefix, $options...);\n  $mdc-outlined-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-outlined-button.$prefix, $options...);\n  $mat-text-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-text-button.$prefix, $options...);\n  $mat-protected-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-protected-button.$prefix, $options...);\n  $mat-filled-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-filled-button.$prefix, $options...);\n  $mat-outlined-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-outlined-button.$prefix, $options...);\n  @include mdc-button-text-theme.theme($mdc-text-button-tokens);\n  @include mdc-button-protected-theme.theme($mdc-protected-button-tokens);\n  @include mdc-button-filled-theme.theme($mdc-filled-button-tokens);\n  @include mdc-button-outlined-theme.theme($mdc-outlined-button-tokens);\n  @include token-utils.create-token-values(tokens-mat-text-button.$prefix, $mat-text-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-protected-button.$prefix, $mat-protected-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-filled-button.$prefix, $mat-filled-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-outlined-button.$prefix, $mat-outlined-button-tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-button.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-button-text-theme.theme(\n        tokens-mdc-text-button.get-unthemable-tokens());\n      @include mdc-button-filled-theme.theme(\n        tokens-mdc-filled-button.get-unthemable-tokens());\n      @include mdc-button-protected-theme.theme(\n        tokens-mdc-protected-button.get-unthemable-tokens());\n      @include mdc-button-outlined-theme.theme(\n        tokens-mdc-outlined-button.get-unthemable-tokens());\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the button: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _text-button-variant($theme, null);\n      @include _filled-button-variant($theme, null);\n      @include _protected-button-variant($theme, null);\n      @include _outlined-button-variant($theme, null);\n    }\n\n    .mat-mdc-button {\n      &.mat-primary {\n        @include _text-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _text-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _text-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-unelevated-button {\n      &.mat-primary {\n        @include _filled-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _filled-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _filled-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-raised-button {\n      &.mat-primary {\n        @include _protected-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _protected-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _protected-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-outlined-button {\n      &.mat-primary {\n        @include _outlined-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _outlined-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _outlined-button-variant($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-button-text-theme.theme(\n        tokens-mdc-text-button.get-typography-tokens($theme));\n      @include mdc-button-filled-theme.theme(\n        tokens-mdc-filled-button.get-typography-tokens($theme));\n      @include mdc-button-outlined-theme.theme(\n        tokens-mdc-outlined-button.get-typography-tokens($theme));\n      @include mdc-button-protected-theme.theme(\n        tokens-mdc-protected-button.get-typography-tokens($theme));\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-button-text-theme.theme(\n        tokens-mdc-text-button.get-density-tokens($theme));\n      @include mdc-button-filled-theme.theme(\n        tokens-mdc-filled-button.get-density-tokens($theme));\n      @include mdc-button-outlined-theme.theme(\n        tokens-mdc-outlined-button.get-density-tokens($theme));\n      @include mdc-button-protected-theme.theme(\n        tokens-mdc-protected-button.get-density-tokens($theme));\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the button: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '@material/density/functions' as mdc-density-functions;\n@use '@material/icon-button/icon-button-theme' as mdc-icon-button-theme;\n@use '../core/tokens/m2/mdc/icon-button' as tokens-mdc-icon-button;\n@use '../core/tokens/m2/mat/icon-button' as tokens-mat-icon-button;\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n\n\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-icon-button-theme.theme(tokens-mdc-icon-button.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin _icon-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-icon-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-icon-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-icon-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-icon-button.get-color-tokens($theme)\n  );\n\n  @include mdc-icon-button-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-icon-button.$prefix, $mat-tokens);\n}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _icon-button-variant($theme, null);\n\n      .mat-mdc-icon-button {\n        &.mat-primary {\n          @include _icon-button-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _icon-button-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _icon-button-variant($theme, warn);\n        }\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon-button.$prefix,\n        tokens-mat-icon-button.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $icon-size: 24px;\n    $density-scale: inspection.get-theme-density($theme);\n    // Manually apply the expected density theming, and include the padding\n    // as it was applied before\n    $calculated-size: mdc-density-functions.prop-value(\n      $density-config: (\n        size: (\n          default: 48px,\n          maximum: 48px,\n          minimum: 28px,\n        ),\n      ),\n      $density-scale: $density-scale,\n      $property-name: size,\n    );\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon-button.$prefix,\n        tokens-mat-icon-button.get-density-tokens($theme));\n    }\n\n    // Use `mat-mdc-button-base` to increase the specificity over the button's structural styles.\n    .mat-mdc-icon-button.mat-mdc-button-base {\n      // Match the styles that used to be present. This is necessary for backwards\n      // compat to match the previous implementations selector count (two classes).\n      @include mdc-icon-button-theme.theme((\n        state-layer-size: $calculated-size,\n      ));\n\n      // TODO: Switch calculated-size to \"var(--mdc-icon-button-state-layer-size)\"\n      // Currently fails validation because the variable is \"undefined\"\n      // in the sass stack.\n      // TODO: Switch icon-size to \"var(--mdc-icon-button-icon-size)\". Currently\n      // fails validation because the variable is \"undefined\" in the sass stack.\n      width: var(--mdc-icon-button-state-layer-size);\n      height: var(--mdc-icon-button-state-layer-size);\n      padding: math.div($calculated-size - $icon-size, 2);\n    }\n  }\n}\n\n@mixin theme($theme) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon-button') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme));\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    @include mdc-icon-button-theme.theme(map.get($tokens, tokens-mdc-icon-button.$prefix));\n    @include token-utils.create-token-values(\n        tokens-mat-icon-button.$prefix, map.get($tokens, tokens-mat-icon-button.$prefix));\n  }\n}\n","@use '@material/fab/fab-theme' as mdc-fab-theme;\n@use '@material/fab/fab-small-theme' as mdc-fab-small-theme;\n@use '@material/fab/extended-fab-theme' as mdc-extended-fab-theme;\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mdc/fab' as tokens-mdc-fab;\n@use '../core/tokens/m2/mdc/fab-small' as tokens-mdc-fab-small;\n@use '../core/tokens/m2/mdc/extended-fab' as tokens-mdc-extended-fab;\n@use '../core/tokens/m2/mat/fab' as tokens-mat-fab;\n@use '../core/tokens/m2/mat/fab-small' as tokens-mat-fab-small;\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-fab.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-fab-theme.theme(tokens-mdc-fab.get-unthemable-tokens());\n      @include mdc-fab-small-theme.theme(tokens-mdc-fab-small.get-unthemable-tokens());\n      @include mdc-extended-fab-theme.theme(\n          tokens-mdc-extended-fab.get-unthemable-tokens()\n      );\n    }\n  }\n}\n\n@mixin _fab-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-fab.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-fab.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-fab.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-fab.get-color-tokens($theme)\n  );\n\n  @include mdc-fab-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab.$prefix, $mat-tokens);\n}\n\n@mixin _fab-small-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-fab-small.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-fab-small.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-fab-small.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-fab-small.get-color-tokens($theme)\n  );\n\n  @include mdc-fab-small-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab-small.$prefix, $mat-tokens);\n}\n\n/// Outputs color theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the fab: primary, secondary, or tertiary\n///     (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _fab-variant($theme, null);\n      @include _fab-small-variant($theme, null);\n      @include mdc-extended-fab-theme.theme(tokens-mdc-extended-fab.get-color-tokens($theme));\n\n      .mat-mdc-fab {\n        &.mat-primary {\n          @include _fab-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _fab-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _fab-variant($theme, warn);\n        }\n      }\n\n      .mat-mdc-mini-fab {\n        &.mat-primary {\n          @include _fab-small-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _fab-small-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _fab-small-variant($theme, warn);\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-extended-fab-theme.theme(tokens-mdc-extended-fab.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab.$prefix,\n        tokens-mat-fab.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab-small.$prefix,\n        tokens-mat-fab-small.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-fab.$prefix,\n        tokens-mat-fab.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab-small.$prefix,\n        tokens-mat-fab-small.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the fab: primary, secondary, or tertiary\n///     (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-fab') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-extended-fab-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mdc-extended-fab.$prefix, $options...);\n  $mdc-fab-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-fab.$prefix, $options...);\n  $mdc-fab-small-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-fab-small.$prefix,\n    $options...);\n  $mat-fab-tokens: token-utils.get-tokens-for($tokens, tokens-mat-fab.$prefix, $options...);\n  $mat-fab-small-tokens: token-utils.get-tokens-for($tokens, tokens-mat-fab-small.$prefix,\n    $options...);\n  @include mdc-extended-fab-theme.theme($mdc-extended-fab-tokens);\n  @include mdc-fab-theme.theme($mdc-fab-tokens);\n  @include mdc-fab-small-theme.theme($mdc-fab-small-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab.$prefix, $mat-fab-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab-small.$prefix, $mat-fab-small-tokens);\n}\n","@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mdc/circular-progress' as tokens-mdc-circular-progress;\n@use '@material/circular-progress/circular-progress-theme' as mdc-circular-progress-theme;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-circular-progress-theme.theme(\n          tokens-mdc-circular-progress.get-unthemable-tokens()\n      );\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the spinner: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    $mdc-circular-progress-color-tokens: tokens-mdc-circular-progress.get-color-tokens($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-circular-progress-theme.theme($mdc-circular-progress-color-tokens);\n\n      .mat-accent {\n        $color: inspection.get-theme-color($theme, accent);\n        @include mdc-circular-progress-theme.theme((active-indicator-color: $color));\n      }\n\n      .mat-warn {\n        $color: inspection.get-theme-color($theme, warn);\n        @include mdc-circular-progress-theme.theme((active-indicator-color: $color));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n}\n\n/// Outputs density theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the spinner: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-circular-progress-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-circular-progress.$prefix, $options...);\n  @include mdc-circular-progress-theme.theme($mdc-circular-progress-tokens);\n}\n","@use 'sass:color';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/badge' as tokens-mat-badge;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-badge.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the badge: primary, secondary, tertiary,\n///      or error (If not specified, default error color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-color-tokens($theme));\n    }\n\n    .mat-badge-accent {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.private-get-color-palette-color-tokens($theme, accent));\n    }\n\n    .mat-badge-warn {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.private-get-color-palette-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the badge: primary, secondary, tertiary,\n///      or error (If not specified, default error color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-badge-tokens: token-utils.get-tokens-for($tokens, tokens-mat-badge.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-badge.$prefix, $mat-badge-tokens);\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use '../core/tokens/m2/mat/datepicker' as tokens-mat-datepicker;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n@use '../core/typography/typography';\n@use '../button/icon-button-theme';\n\n// TODO(crisbeto): these variables aren't used anymore and should be removed.\n$selected-today-box-shadow-width: 1px;\n$selected-fade-amount: 0.6;\n$range-fade-amount: 0.2;\n$today-fade-amount: 0.2;\n$calendar-body-font-size: 13px !default;\n$calendar-weekday-table-font-size: 11px !default;\n\n@mixin _calendar-color($theme, $palette-name) {\n  $palette-color: inspection.get-theme-color($theme, $palette-name);\n  $range-color: tokens-mat-datepicker.private-get-range-background-color($palette-color);\n  $range-tokens: tokens-mat-datepicker.get-range-color-tokens($range-color);\n  $calendar-tokens:\n    tokens-mat-datepicker.private-get-calendar-color-palette-color-tokens($theme, $palette-name);\n\n  @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n    map.merge($calendar-tokens, $range-tokens));\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-datepicker.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the main selection: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-color-tokens($theme));\n    }\n\n    .mat-datepicker-content {\n      &.mat-accent {\n        @include _calendar-color($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _calendar-color($theme, warn);\n      }\n    }\n\n    .mat-datepicker-toggle-active {\n      &.mat-accent {\n        $accent-tokens:\n          tokens-mat-datepicker.private-get-toggle-color-palette-color-tokens($theme, accent);\n        @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $accent-tokens);\n      }\n\n      &.mat-warn {\n        $warn-tokens:\n          tokens-mat-datepicker.private-get-toggle-color-palette-color-tokens($theme, warn);\n        @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $warn-tokens);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin date-range-colors(\n  $range-color,\n  $comparison-color: tokens-mat-datepicker.$private-default-comparison-color,\n  $overlap-color: tokens-mat-datepicker.$private-default-overlap-color,\n  $overlap-selected-color:\n    tokens-mat-datepicker.private-get-default-overlap-selected-color($overlap-color)) {\n  $tokens: tokens-mat-datepicker.get-range-color-tokens(\n    $range-color: $range-color,\n    $comparison-color: $comparison-color,\n    $overlap-color: $overlap-color,\n    $overlap-selected-color: $overlap-selected-color,\n  );\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $tokens);\n  }\n}\n\n/// Outputs density theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    // TODO(crisbeto): move this into the structural styles\n    // once the icon button density is switched to tokens.\n\n    // Regardless of the user-passed density, we want the calendar\n    // previous/next buttons to remain at density -2\n    .mat-calendar-controls {\n      @include icon-button-theme.density(-2);\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the main selection: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-datepicker-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-datepicker.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $mat-datepicker-tokens);\n}\n","@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mat/icon' as tokens-mat-icon;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@mixin _palette-colors($theme, $palette-name) {\n  $color: inspection.get-theme-color($theme, $palette-name, text);\n  $tokens: tokens-mat-icon.private-get-icon-color-tokens($color);\n  @include token-utils.create-token-values(tokens-mat-icon.$prefix, $tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-icon.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the icon: primary, secondary, tertiary, or error\n///     (If not specified, default neutral color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon.$prefix,\n        tokens-mat-icon.get-color-tokens($theme));\n    }\n\n    .mat-icon {\n      &.mat-primary {\n        @include _palette-colors($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _palette-colors($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-colors($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {}\n}\n\n/// Outputs density theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the icon: surface, primary, secondary, tertiary,\n///     or error (If not specified, default surface color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-icon-tokens: token-utils.get-tokens-for($tokens, tokens-mat-icon.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-icon.$prefix, $mat-icon-tokens);\n}\n","@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mat/stepper' as tokens-mat-stepper;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for mat-stepper.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the stepper: primary, secondary,\n///   tertiary, or error (If not specified, primary color values will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-color-tokens($theme));\n\n      .mat-step-header.mat-accent {\n        @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n          tokens-mat-stepper.private-get-color-palette-color-tokens($theme, accent));\n      }\n\n      .mat-step-header.mat-warn {\n        @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n          tokens-mat-stepper.private-get-color-palette-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the stepper: primary, secondary,\n///   tertiary, or error (If not specified, primary color values will be used).\n@mixin theme($theme,  $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    $mat-stepper-tokens: token-utils.get-tokens-for(\n      $tokens,\n      tokens-mat-stepper.$prefix,\n      $options...\n    );\n    @include token-utils.create-token-values(\n        tokens-mat-stepper.$prefix, $mat-stepper-tokens);\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/toolbar' as tokens-mat-toolbar;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(\n    tokens-mat-toolbar.$prefix,\n    tokens-mat-toolbar.private-get-color-palette-color-tokens(\n      $background-color: inspection.get-theme-color($theme, $palette-name),\n      $text-color: inspection.get-theme-color($theme, $palette-name, default-contrast)\n    )\n  );\n}\n\n@mixin base($theme) {}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-color-tokens($theme));\n    }\n\n    .mat-toolbar {\n      &.mat-primary {\n        @include _palette-styles($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    // TODO(mmalerba): Stop calling this and resolve resulting screen diffs.\n    $theme: inspection.private-get-typography-back-compat-theme($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-density-tokens($theme));\n    }\n  }\n}\n\n@mixin theme($theme) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme));\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n      map.get($tokens, tokens-mat-toolbar.$prefix));\n  }\n}\n","@use \"@angular/material\" as mat;\n\n@use \"sass:map\";\n// @use './app/pages/component-category-list/component-category-list-theme';\n@use \"./app/pages/layout/layout-theme\";\n// @use './app/pages/component-viewer/component-viewer-theme';\n// @use './app/pages/guide-list/guide-list-theme';\n@use \"./app/pages/home/home-theme\";\n@use \"./app/pages/not-found/not-found-theme\";\n// @use './app/shared/carousel/carousel-theme';\n// @use './app/shared/example-viewer/example-viewer-theme';\n@use \"./app/shared/footer/footer-theme\";\n@use \"./app/shared/navbar/navbar-theme\";\n@use \"./app/shared/table-of-contents/table-of-contents-theme\";\n// @use './app/shared/cookie-popup/cookie-popup-theme';\n@use \"./styles/api-theme\";\n@use \"./styles/markdown-theme\";\n@use \"./styles/svg-theme\";\n@use \"./styles/tables-theme\";\n\n// Styles for the docs app that are based on the current theme.\n@mixin theme($theme) {\n    $primary: map.get($theme, primary);\n    $accent: map.get($theme, accent);\n    $warn: map.get($theme, warn);\n    $background: map.get($theme, background);\n    $foreground: map.get($theme, foreground);\n    $next-theme: mat.define-palette(mat.$red-palette);\n\n    .docs-app-background {\n        background: mat.get-color-from-palette($background, background);\n    }\n\n    .docs-primary-header {\n        background: mat.get-color-from-palette($primary);\n\n        h1 {\n            color: mat.get-color-from-palette($primary, default-contrast);\n        }\n    }\n\n    .docs-footer {\n        background: mat.get-color-from-palette($primary);\n        color: mat.get-color-from-palette($primary, default-contrast);\n    }\n\n    .docs-help-support {\n        color: mat.get-color-from-palette($foreground, secondary-text);\n\n        a {\n            color: mat.get-color-from-palette($foreground, text);\n        }\n    }\n\n    .is-next-version {\n        background: mat.get-color-from-palette($next-theme, 900) !important;\n    }\n\n    // @include carousel-theme.theme($theme);\n    // @include component-category-list-theme.theme($theme);\n    @include layout-theme.theme($theme);\n    // @include component-viewer-theme.theme($theme);\n    @include api-theme.theme($theme);\n    @include markdown-theme.theme($theme);\n    @include svg-theme.theme($theme);\n    @include tables-theme.theme($theme);\n    // @include example-viewer-theme.theme($theme);\n    @include footer-theme.theme($theme);\n    // @include guide-list-theme.theme($theme);\n    @include home-theme.theme($theme);\n    @include not-found-theme.theme($theme);\n    @include navbar-theme.theme($theme);\n    @include table-of-contents-theme.theme($theme);\n    // @include cookie-popup-theme.theme($theme);\n}\n","@use \"@angular/material\" as mat;\n@use \"sass:color\";\n@use \"sass:map\";\n@use \"../../../styles/constants\";\n\n@mixin theme($theme) {\n    $primary: map.get($theme, primary);\n    $background: map.get($theme, background);\n    $foreground: map.get($theme, foreground);\n    $is-dark-theme: map.get($theme, is-dark);\n    $nav-background-opacity: if($is-dark-theme, 0.2, 0.03);\n    $nav-background-focus-opacity: if($is-dark-theme, 0.25, 0.08);\n\n    .docs-component-viewer-nav-content {\n        border-right: 1px solid mat.get-color-from-palette($foreground, divider);\n\n        h3 {\n            background: mat.get-color-from-palette($primary);\n            color: mat.get-color-from-palette($primary, default-contrast);\n        }\n\n        &::-webkit-scrollbar-thumb {\n            background: rgba(0, 0, 0, 0.26);\n        }\n\n        a {\n            color: map.get($foreground, secondary-text);\n\n            &:hover {\n                color: mat.get-color-from-palette($foreground, text);\n            }\n\n            &.docs-component-viewer-sidenav-item-selected {\n                background: rgba(mat.get-color-from-palette($primary, default), 0.15);\n\n                .mdc-list-item__primary-text {\n                    color: color.adjust(mat.get-color-from-palette($primary, default), $lightness: if($is-dark-theme, 25%, 0%));\n                }\n            }\n\n            &.docs-component-viewer-sidenav-item-selected:hover {\n                background: rgba(mat.get-color-from-palette($primary, default), 0.3);\n            }\n        }\n    }\n\n    app-viewer {\n        color: mat.get-color-from-palette($foreground, text);\n        /* TODO(mdc-migration): The following rule targets internal classes of tabs that may no longer apply for the MDC version. */\n        .mat-tab-label:focus {\n            color: mat.get-color-from-palette($foreground, text);\n        }\n    }\n\n    .docs-component-viewer-tabbed-content,\n    .docs-api-h3 {\n        border-bottom: 1px solid mat.get-color-from-palette($foreground, divider);\n    }\n\n    @media (max-width: constants.$small-breakpoint-width) {\n        .docs-component-viewer-sidenav {\n            .docs-component-viewer-nav-content {\n                background: none;\n            }\n        }\n\n        .mat-drawer {\n            &::-webkit-scrollbar-thumb {\n                background: rgba(0, 0, 0, 0.26);\n            }\n        }\n    }\n}\n","@use 'sass:map';\n@use '@angular/material' as mat;\n\n// Mixin to apply theme colors for generated API docs.\n@mixin theme($theme) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n  $is-dark-theme: map.get($theme, is-dark);\n\n  .docs-api-method-name-cell {\n    color: mat.get-color-from-palette($primary, if($is-dark-theme, 200, 800));\n  }\n\n  .docs-api-method-returns-type,\n  .docs-api-method-parameter-type {\n    color: mat.get-color-from-palette($primary, if($is-dark-theme, 200, darker));\n  }\n\n  .docs-api-modifier-method-marker {\n    $async-method-marker-hue: if($is-dark-theme, 200, 400);\n    background-color: mat.get-color-from-palette($primary, $async-method-marker-hue);\n    color: mat.get-color-from-palette($primary, '#{$async-method-marker-hue}-contrast');\n  }\n\n  // Force the top-level API docs header to be hidden, since this is already\n  // captured in the top nav-bar.\n  .docs-api-h1 {\n    display: none !important;\n  }\n\n  // Prevent p tags from not breaking, causing x axis overflows.\n  .docs-api > p {\n    word-break: break-word;\n  }\n\n  .docs-api a {\n    color: mat.get-color-from-palette($primary, if($is-dark-theme, 200, default));\n  }\n\n  .docs-api-class-name,\n  .docs-api-module-import,\n  .docs-api-class-selector-name,\n  .docs-api-class-export-name {\n    background: rgba(mat.get-color-from-palette($foreground, secondary-text), 0.06);\n  }\n}\n","@use 'sass:map';\n@use '@angular/material' as mat;\n\n// Mixin to apply theme colors for docs generated from markdown files in the material2 repo.\n@mixin theme($theme) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n  $is-dark-theme: map.get($theme, is-dark);\n  $exportBackgroundOpacity: if($is-dark-theme, 0.06, 0.03);\n\n  .docs-markdown {\n    a:not(.mat-mdc-button-base) {\n      color: mat.get-color-from-palette($primary, if($is-dark-theme, 200, default));\n    }\n\n    pre {\n      background: rgba(mat.get-color-from-palette($foreground, secondary-text), .01);\n      border: .5px solid rgba(mat.get-color-from-palette($foreground, secondary-text), .2);\n\n      code {\n        background: transparent;\n      }\n    }\n\n    h3 .material-icons,\n    h4 .material-icons {\n      color: mat.get-color-from-palette($foreground, secondary-text);\n    }\n\n    code {\n      background: rgba(mat.get-color-from-palette($foreground, secondary-text), $exportBackgroundOpacity);\n    }\n  }\n}\n","@use 'sass:map';\n@use '@angular/material' as mat;\n\n// Mixin to create a css class for each fill, stroke, and stop-color for a given color.\n@mixin _svgColorProperties($className, $color) {\n  .docs-svg-#{$className}-fill {\n    fill: $color;\n  }\n\n  .docs-svg-#{$className}-stroke {\n    stroke: $color;\n  }\n\n  .docs-svg-#{$className}-stop-color {\n    stop-color: $color;\n  }\n}\n\n// Mixin to apply theme colors for generated API docs.\n@mixin theme($theme) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n  $is-dark-theme: map.get($theme, is-dark);\n\n  @include _svgColorProperties(primary, mat.get-color-from-palette($primary));\n  @include _svgColorProperties(accent, mat.get-color-from-palette($accent));\n\n  // Use sass's `lighten` and `darken` to create gradient colors for the docs SVGs.\n  // This is specifically tailored to the SVGs in this app and is not a general approach.\n  $base: mat.get-color-from-palette($primary);\n  @include _svgColorProperties(primary-dark-30,  scale_color($base, $lightness: -30%));\n  @include _svgColorProperties(primary-dark-40,  scale_color($base, $lightness: -40%));\n  @include _svgColorProperties(primary-light-20, scale_color($base, $lightness: +20%));\n  @include _svgColorProperties(primary-light-30, scale_color($base, $lightness: +30%));\n  @include _svgColorProperties(primary-light-40, scale_color($base, $lightness: +40%));\n  @include _svgColorProperties(primary-light-60, scale_color($base, $lightness: +60%));\n  @include _svgColorProperties(primary-light-80, scale_color($base, $lightness: +80%));\n  @include _svgColorProperties(primary-light-85, scale_color($base, $lightness: +85%));\n}\n","@use 'sass:map';\n@use '@angular/material' as mat;\n\n// Mixin to apply theme colors for both generated API docs and markdown docs (guides/overviews).\n@mixin theme($theme) {\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n\n  .docs-api table,\n  .docs-markdown > table {\n    color: mat.get-color-from-palette($foreground, text);\n  }\n\n  .docs-api th,\n  .docs-markdown > table th {\n    background: mat.get-color-from-palette($background, app-bar);\n  }\n\n  .docs-api td,\n  .docs-api thead,\n  .docs-markdown > table td,\n  .docs-markdown > table thead {\n    border: 1px solid mat.get-color-from-palette($foreground, divider);\n  }\n}\n","@use 'sass:map';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n\n  app-footer {\n    .docs-footer-links a {\n      color: mat.get-color-from-palette($primary, default-contrast);\n    }\n  }\n}\n","@use \"sass:map\";\n@use \"@angular/material\" as mat;\n\n@mixin theme($theme) {\n    $primary: map.get($theme, primary);\n    $accent: map.get($theme, accent);\n    $warn: map.get($theme, warn);\n    $background: map.get($theme, background);\n    $foreground: map.get($theme, foreground);\n\n    app-home {\n        .docs-header-background {\n            background: mat.get-color-from-palette($primary);\n        }\n\n        .docs-header-headline {\n            color: mat.get-color-from-palette($primary, default-contrast);\n        }\n\n        .docs-header-start {\n            color: mat.get-color-from-palette($primary);\n\n            .docs-link {\n                color: mat.get-color-from-palette($primary, default-contrast);\n            }\n        }\n\n        .docs-homepage-row {\n            color: mat.get-color-from-palette($foreground, secondary-text);\n        }\n\n        .docs-homepage-carousel-row h2 {\n            color: mat.get-color-from-palette($foreground, secondary-text);\n        }\n\n        a.docs-link,\n        a.docs-featured-components-carousel-item {\n            color: mat.get-color-from-palette($foreground, secondary-text);\n        }\n\n        .docs-homepage-guides-card,\n        a.docs-link:hover {\n            color: mat.get-color-from-palette($foreground, text);\n        }\n\n        .docs-homepage-guides-card-divider {\n            background: mat.get-color-from-palette($accent);\n        }\n\n        [carousel-item]:hover {\n            .docs-homepage-guides-card {\n                background: mat.get-color-from-palette($background, hover);\n            }\n        }\n\n        [carousel-item]:focus {\n            .docs-homepage-guides-card {\n                background: mat.get-color-from-palette($background, focused-button);\n            }\n            outline: none;\n        }\n    }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $primary: map.get($theme, primary);\n  $foreground: map.get($theme, foreground);\n  $background: map.get($theme, background);\n  $frown-color: mat.get-color-from-palette($background, background);\n  $shield-color: mat.get-color-from-palette($primary);\n\n  app-not-found {\n    color: mat.get-color-from-palette($foreground, text);\n\n    .shield-left {\n      fill: $shield-color;\n    }\n\n    .shield-right {\n      fill: color.adjust($shield-color, $lightness: -10%);\n    }\n\n    .eye {\n      fill: $frown-color;\n    }\n\n    .frown {\n      stroke: $frown-color;\n    }\n  }\n}\n","@use 'sass:map';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n\n  app-navbar {\n    color: mat.get-color-from-palette($primary, default-contrast);\n\n    .docs-navbar, .docs-navbar-header {\n      background: mat.get-color-from-palette($primary);\n\n      & a:hover, & a:focus {\n        background: rgba(0, 0, 0, 0.4);\n      }\n\n      .docs-navbar-header-item-selected {\n        background: rgba(0, 0, 0, 0.2);\n      }\n    }\n  }\n}\n","@use 'sass:map';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n  $is-dark-theme: map.get($theme, is-dark);\n\n  .docs-toc-container {\n    border-left: solid 4px mat.get-color-from-palette($primary);\n\n    .docs-link {\n      color: mat.get-color-from-palette($foreground, secondary-text);\n\n      &:hover,\n      &.docs-active {\n        color: mat.get-color-from-palette($primary, if($is-dark-theme, 200, default));\n      }\n    }\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}